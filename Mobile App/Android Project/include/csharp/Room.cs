// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class Room: IDisposable {
		private bool disposed = false; 
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoRoom reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomAcceptIncomingNative(IntPtr r, OnIncomingEntered onIncomingEntered, OnIncomingExited onIncomingExited);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomAcquireMediaRouteNative(IntPtr r, OnMediaRouteAcquired onMediaRouteAcquired, OnMediaRouteAcquireFailed onMediaRouteAcquireFailed);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalCameraNative(IntPtr r, IntPtr localCamera, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalMicrophoneNative(IntPtr r, IntPtr localMicrophone, Boolean removeOthers, Boolean isAES);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalMonitorNative(IntPtr r, IntPtr localMonitor, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalRendererNative(IntPtr r, IntPtr localRenderer, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalSpeakerNative(IntPtr r, IntPtr localSpeaker, Boolean removeOthers, Boolean isAES);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalWindowShareNative(IntPtr r, IntPtr localWindowShare, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddVirtualVideoSourceNative(IntPtr r, IntPtr virtualVideoSource, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddVirtualWindowShareNative(IntPtr r, IntPtr virtualWindowShare, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomBootAllParticipantsNative(IntPtr r, IntPtr reason);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomBootParticipantNative(IntPtr r, IntPtr userId, IntPtr reason);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomCancelInviteNative(IntPtr r, IntPtr inviteeId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomDeleteNative(IntPtr r, OnDeleteResult onDeleteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomDisableMediaNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomEnableMediaNative(IntPtr r, OnMediaEnabled onMediaEnabled, OnMediaFailed onMediaFailed, OnMediaDisabled onMediaDisabled);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomEnterNative(IntPtr r, IntPtr password, OnEntered onEntered, OnExited onExited);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomGetHistoryNative(IntPtr r, uint numMessages, OnGetHistoryResults onGetHistoryResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomGetHistoryByIdNative(IntPtr r, long messageId, uint numMessagesBefore, uint numMessagesAfter, OnGetHistoryResults onGetHistoryResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomGetHistoryByTimeNative(IntPtr r, ulong time, uint numMessagesBefore, uint numMessagesAfter, OnGetHistoryResults onGetHistoryResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetIdNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomGetRoomPropertiesNative(IntPtr r, OnGetRoomPropertiesResult onGetRoomPropertiesResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalCamerasNative(IntPtr r, IntPtr cameras);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalCamerasGetcamerasArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalCamerasFreecamerasArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomVectorVidyoLocalCameraAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomVectorVidyoLocalCameraDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalMicrophonesNative(IntPtr r, IntPtr mics);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalMicrophonesGetmicsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalMicrophonesFreemicsArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomVectorVidyoLocalMicrophoneAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomVectorVidyoLocalMicrophoneDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalMonitorsNative(IntPtr r, IntPtr monitors);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalMonitorsGetmonitorsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalMonitorsFreemonitorsArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomVectorVidyoLocalMonitorAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomVectorVidyoLocalMonitorDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalRenderersNative(IntPtr r, IntPtr renderers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalRenderersGetrenderersArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalRenderersFreerenderersArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomVectorVidyoLocalRendererAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomVectorVidyoLocalRendererDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalSpeakersNative(IntPtr r, IntPtr speakers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalSpeakersGetspeakersArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalSpeakersFreespeakersArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomVectorVidyoLocalSpeakerAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomVectorVidyoLocalSpeakerDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalWindowSharesNative(IntPtr r, IntPtr windowShares);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalWindowSharesGetwindowSharesArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetSelectedLocalWindowSharesFreewindowSharesArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomVectorVidyoLocalWindowShareAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomVectorVidyoLocalWindowShareDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern RoomShowThrottle VidyoRoomGetShowThrottleNative(IntPtr room);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern uint VidyoRoomGetShowThrottleTimerIntervalNative(IntPtr room);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern uint VidyoRoomGetShowThrottleWindowSizeChangeThresholdNative(IntPtr room);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomGetStatsNative(IntPtr r, IntPtr stats);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern RoomType VidyoRoomGetTypeNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetUserNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomHideStatisticsDialogNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomInviteNative(IntPtr r, IntPtr userId, IntPtr message, OnInviteResult onInviteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomInviteAllNative(IntPtr r, IntPtr message, OnInviteResult onInviteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomInviteNNative(IntPtr r, IntPtr userIds, IntPtr message, OnInviteResult onInviteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomInviteNSetuserIdsArrayNative(IntPtr obj, IntPtr objArray, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomVectorLmiStringAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomVectorLmiStringDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomLeaveNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomMessageSearchNative(IntPtr r, IntPtr searchText, uint index, uint pageSize, OnMessageSearchResults onMessageSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterMessageEventListenerNative(IntPtr r, OnMessageReceived onMessageReceived, OnMessageAcknowledged onMessageAcknowledged, OnMessageRead onMessageRead, OnMessageTypingIndication onMessageTypingIndication);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterModerationResultEventListenerNative(IntPtr room, OnModerationResult onModerationResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterParticipantEventListenerNative(IntPtr r, OnParticipantJoined onParticipantJoined, OnParticipantLeft onParticipantLeft, OnDynamicParticipantChanged onDynamicParticipantChanged, OnLoudestParticipantChanged onLoudestParticipantChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterPipEventListenerNative(IntPtr r, OnPipLocationChanged onPipLocationChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterRecorderInCallEventListenerNative(IntPtr r, RecorderInCall onRecorderInCallChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterResourceManagerEventListenerNative(IntPtr r, OnAvailableResourcesChanged onAvailableResourcesChanged, OnMaxRemoteSourcesChanged onMaxRemoteSourcesChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterRoomPropertiesEventListenerNative(IntPtr r, OnRoomPropertiesChanged onRoomPropertiesChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterSubjectEventListenerNative(IntPtr r, OnSetSubject onSetSubject);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRegisterUnprocessedAudioEventListenerNative(IntPtr r, OnUnprocessedAudioSupportChanged onUnprocessedAudioSupportChanged, OnUnprocessedAudioStarted onUnprocessedAudioStarted);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRejectIncomingNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalCameraNative(IntPtr r, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalMicrophoneNative(IntPtr r, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalMonitorNative(IntPtr r, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalRendererNative(IntPtr r, IntPtr localRenderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalSpeakerNative(IntPtr r, IntPtr localSpeaker);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalWindowShareNative(IntPtr r, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRemoveRoleChangeAuthorizationNative(IntPtr room, [MarshalAs(UnmanagedType.I4)]Role role, OnRemoveRoleChangeAuthorizationResult onRemoveRoleChangeAuthorizationResult, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveVirtualVideoSourceNative(IntPtr r, IntPtr virtualVideoSource);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveVirtualWindowShareNative(IntPtr r, IntPtr virtualWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomReportLocalParticipantOnJoinedNative(IntPtr r, Boolean reportLocalParticipant);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRequestAudioSilenceForAllNative(IntPtr room, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRequestAudioSilenceForParticipantNative(IntPtr room, IntPtr userId, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRequestRoleChangeNative(IntPtr room, [MarshalAs(UnmanagedType.I4)]Role newRole, IntPtr auth, OnRequestRoleChangeResult onRequestRoleChangeResult, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRequestVideoSilenceForAllNative(IntPtr room, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRequestVideoSilenceForParticipantNative(IntPtr room, IntPtr userId, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomResizeStatisticsDialogNative(IntPtr r, int width, int height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRevokeAudioForAllNative(IntPtr room, Boolean revoke, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRevokeAudioForParticipantNative(IntPtr room, IntPtr userId, Boolean revoke, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRevokeVideoForAllNative(IntPtr room, Boolean revoke, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomRevokeVideoForParticipantNative(IntPtr room, IntPtr userId, Boolean revoke, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSendMessageNative(IntPtr r, IntPtr message);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSendMessageAcknowledgedNative(IntPtr r, long messageId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSendMessageTypingIndicationNative(IntPtr r, [MarshalAs(UnmanagedType.I4)]ChatMessage.ChatMessageTypingIndication typingIndication);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSetDynamicGenerationPositionNative(IntPtr r, uint generation, int x, int y, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSetDynamicLocalRendererNative(IntPtr r, IntPtr renderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetFavoriteNative(IntPtr r, Boolean isFavorite, OnSetFavoriteResult onSetFavoriteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSetMaxAudioSourcesNative(IntPtr r, uint count);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetMaxReceiveBitRateNative(IntPtr r, uint bitRate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetMaxSendBitRateNative(IntPtr r, uint bitRate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSetMaxVideoSourcesNative(IntPtr r, uint count);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSetRoleChangeAuthorizationNative(IntPtr room, [MarshalAs(UnmanagedType.I4)]Role role, IntPtr auth, OnSetRoleChangeAuthorizationResult onSetRoleAuthorizationResult, IntPtr userContext);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSetRoomPropertiesNative(IntPtr r, IntPtr roomProperties, OnSetRoomPropertiesResult onSetRoomPropertiesResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetShowThrottleNative(IntPtr room, [MarshalAs(UnmanagedType.I4)]RoomShowThrottle t);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetShowThrottleTimerIntervalNative(IntPtr room, uint seconds);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetShowThrottleWindowSizeChangeThresholdNative(IntPtr room, uint percentage);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomSetSubjectNative(IntPtr r, IntPtr subject);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomShowStatisticsDialogNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnRegisterModerationResultEventListenerNative(IntPtr room);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterMessageEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterParticipantEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterPipEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterRecorderInCallEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterResourceManagerEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterRoomPropertiesEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterSubjectEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoRoomUnregisterUnprocessedAudioEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoRoomGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoRoomSetUserDataNative(IntPtr obj, IntPtr userData);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnAvailableResourcesChanged(IntPtr room, uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive);
		private OnAvailableResourcesChanged _mOnAvailableResourcesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnDeleteResult(IntPtr room, RoomDeleteResult result);
		private OnDeleteResult _mOnDeleteResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnDynamicParticipantChanged(IntPtr room, IntPtr selectedParticipants);
		private OnDynamicParticipantChanged _mOnDynamicParticipantChanged;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnDynamicParticipantChangedGetselectedParticipantsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnDynamicParticipantChangedFreeselectedParticipantsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnEntered(IntPtr room, RoomEnterResult result);
		private OnEntered _mOnEntered;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnExited(IntPtr room, RoomExitReason reason);
		private OnExited _mOnExited;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnGetHistoryResults(IntPtr room, IntPtr records, long historySize, RoomSearchResult result);
		private OnGetHistoryResults _mOnGetHistoryResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnGetHistoryResultsGetrecordsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnGetHistoryResultsFreerecordsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnGetRoomPropertiesResult(IntPtr room, RoomGetPropertiesResult result, IntPtr roomProperties);
		private OnGetRoomPropertiesResult _mOnGetRoomPropertiesResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnIncomingEntered(IntPtr room, RoomEnterResult result);
		private OnIncomingEntered _mOnIncomingEntered;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnIncomingExited(IntPtr room, RoomExitReason reason);
		private OnIncomingExited _mOnIncomingExited;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnInviteResult(IntPtr room, IntPtr inviteeId, RoomInviteResult result);
		private OnInviteResult _mOnInviteResult;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnInviteResultGetinviteeIdCStr(IntPtr inviteeId);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLoudestParticipantChanged(IntPtr room, IntPtr participant, Boolean isAudioOnly, Boolean isStatic);
		private OnLoudestParticipantChanged _mOnLoudestParticipantChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMaxRemoteSourcesChanged(IntPtr room, uint maxRemoteSources);
		private OnMaxRemoteSourcesChanged _mOnMaxRemoteSourcesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaDisabled(IntPtr room, RoomMediaDisableReason reason);
		private OnMediaDisabled _mOnMediaDisabled;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaEnabled(IntPtr room);
		private OnMediaEnabled _mOnMediaEnabled;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaFailed(IntPtr room, RoomMediaFailReason reason);
		private OnMediaFailed _mOnMediaFailed;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaRouteAcquireFailed(IntPtr room, RoomMediaFailReason reason);
		private OnMediaRouteAcquireFailed _mOnMediaRouteAcquireFailed;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaRouteAcquired(IntPtr room);
		private OnMediaRouteAcquired _mOnMediaRouteAcquired;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageAcknowledged(IntPtr room, IntPtr chatMessage);
		private OnMessageAcknowledged _mOnMessageAcknowledged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageRead(IntPtr room, IntPtr participant, long messageId);
		private OnMessageRead _mOnMessageRead;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageReceived(IntPtr room, IntPtr participant, IntPtr chatMessage);
		private OnMessageReceived _mOnMessageReceived;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageSearchResults(IntPtr room, IntPtr searchText, IntPtr records, RoomSearchResult result);
		private OnMessageSearchResults _mOnMessageSearchResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnMessageSearchResultsGetrecordsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnMessageSearchResultsFreerecordsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageTypingIndication(IntPtr room, IntPtr participant, ChatMessage.ChatMessageTypingIndication typingIndication);
		private OnMessageTypingIndication _mOnMessageTypingIndication;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnModerationResult(IntPtr room, RoomModerationResult result, IntPtr userContext);
		private OnModerationResult _mOnModerationResult;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnModerationResultGetuserContextCStr(IntPtr userContext);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnParticipantJoined(IntPtr room, IntPtr participant);
		private OnParticipantJoined _mOnParticipantJoined;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnParticipantLeft(IntPtr room, IntPtr participant);
		private OnParticipantLeft _mOnParticipantLeft;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnPipLocationChanged(IntPtr room, int x, int y, uint width, uint height, Boolean isExpanded);
		private OnPipLocationChanged _mOnPipLocationChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoveRoleChangeAuthorizationResult(IntPtr room, RoomRemoveRoleChangeAuthorizationResult result, IntPtr userContext);
		private OnRemoveRoleChangeAuthorizationResult _mOnRemoveRoleChangeAuthorizationResult;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnRemoveRoleChangeAuthorizationResultGetuserContextCStr(IntPtr userContext);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRequestRoleChangeResult(IntPtr room, RoomRequestRoleChangeResult result, IntPtr userContext);
		private OnRequestRoleChangeResult _mOnRequestRoleChangeResult;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnRequestRoleChangeResultGetuserContextCStr(IntPtr userContext);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRoomPropertiesChanged(IntPtr room, IntPtr roomProperties);
		private OnRoomPropertiesChanged _mOnRoomPropertiesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSetFavoriteResult(IntPtr room, Boolean isFavorite, RoomSetFavoriteResult result);
		private OnSetFavoriteResult _mOnSetFavoriteResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSetRoleChangeAuthorizationResult(IntPtr room, RoomSetRoleChangeAuthorizationResult result, IntPtr userContext);
		private OnSetRoleChangeAuthorizationResult _mOnSetRoleChangeAuthorizationResult;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnSetRoleChangeAuthorizationResultGetuserContextCStr(IntPtr userContext);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSetRoomPropertiesResult(IntPtr room, RoomSetPropertiesResult result);
		private OnSetRoomPropertiesResult _mOnSetRoomPropertiesResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSetSubject(IntPtr room, IntPtr subject);
		private OnSetSubject _mOnSetSubject;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnUnprocessedAudioStarted(IntPtr room, Boolean started);
		private OnUnprocessedAudioStarted _mOnUnprocessedAudioStarted;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnUnprocessedAudioSupportChanged(IntPtr room, Boolean supported);
		private OnUnprocessedAudioSupportChanged _mOnUnprocessedAudioSupportChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void RecorderInCall(IntPtr r, Boolean recorderInCall);
		private RecorderInCall _mRecorderInCall;
		public enum Role{
			RoleModerator,
			RoleNone
		}
		public enum RoomDeleteResult{
			RoomdeleteresultOK,
			RoomdeleteresultNoResponse,
			RoomdeleteresultUnauthorized,
			RoomdeleteresultOutOfResources,
			RoomdeleteresultMiscError
		}
		public enum RoomEnterResult{
			RoomenterresultOK,
			RoomenterresultCancelled,
			RoomenterresultNoResponse,
			RoomenterresultInvalidPassword,
			RoomenterresultUnknownRoom,
			RoomenterresultRoomFull,
			RoomenterresultNotMember,
			RoomenterresultBanned,
			RoomenterresultMiscLocalError,
			RoomenterresultMiscRemoteError
		}
		public enum RoomExitReason{
			RoomexitreasonLeft,
			RoomexitreasonConnectionLost,
			RoomexitreasonSessionConnectionLost,
			RoomexitreasonMembershipConnectionLost,
			RoomexitreasonNoResponse,
			RoomexitreasonProtocolViolation,
			RoomexitreasonBooted,
			RoomexitreasonShuttingDown,
			RoomexitreasonMiscLocalError,
			RoomexitreasonMiscRemoteError
		}
		public enum RoomGetPropertiesResult{
			RoomgetpropertiesresultOK,
			RoomgetpropertiesresultNoResponse,
			RoomgetpropertiesresultUnauthorized,
			RoomgetpropertiesresultMiscLocalError,
			RoomgetpropertiesresultMiscRemoteError
		}
		public enum RoomInviteResult{
			RoominviteresultOK,
			RoominviteresultNoResponse,
			RoominviteresultUnauthorized,
			RoominviteresultOutOfResources,
			RoominviteresultMiscError,
			RoominviteresultUserIsOffline,
			RoominviteresultServerError
		}
		public enum RoomMediaDisableReason{
			RoommediadisablereasonDisabled,
			RoommediadisablereasonSignalingConnectionLost,
			RoommediadisablereasonMediaConnectionLost,
			RoommediadisablereasonBooted,
			RoommediadisablereasonSessionTerminated,
			RoommediadisablereasonServerShuttingDown,
			RoommediadisablereasonConferenceDestroyed,
			RoommediadisablereasonMiscLocalError,
			RoommediadisablereasonMiscRemoteError
		}
		public enum RoomMediaFailReason{
			RoommediafailreasonCancelled,
			RoommediafailreasonNoConference,
			RoommediafailreasonSignalingConnectionLost,
			RoommediafailreasonMediaConnectionLost,
			RoommediafailreasonNoResponse,
			RoommediafailreasonInvalidPassword,
			RoommediafailreasonRoomIsFull,
			RoommediafailreasonInvalidRoomKey,
			RoommediafailreasonRoomDisabled,
			RoommediafailreasonAllLinesInUse,
			RoommediafailreasonConnectionError,
			RoommediafailreasonInvalidRoom,
			RoommediafailreasonConferenceLocked,
			RoommediafailreasonSeatLicenseExpired,
			RoommediafailreasonNotLicensed,
			RoommediafailreasonRejected,
			RoommediafailreasonUnknownError,
			RoommediafailreasonMiscLocalError,
			RoommediafailreasonMiscRemoteError
		}
		public enum RoomModerationResult{
			RoommoderationresultOK,
			RoommoderationresultNoResponse,
			RoommoderationresultUnauthorized,
			RoommoderationresultMiscLocalError,
			RoommoderationresultMiscRemoteError
		}
		public enum RoomProfileControlMode{
			RoomprofilecontrolmodeAlwaysOn,
			RoomprofilecontrolmodeAlwaysOff,
			RoomprofilecontrolmodeDefault
		}
		public enum RoomRemoveRoleChangeAuthorizationResult{
			RoomremoverolechangeauthorizationresultOK,
			RoomremoverolechangeauthorizationresultNoResponse,
			RoomremoverolechangeauthorizationresultUnauthorized,
			RoomremoverolechangeauthorizationresultMiscLocalError,
			RoomremoverolechangeauthorizationresultMiscRemoteError
		}
		public enum RoomRequestRoleChangeResult{
			RoomrequestrolechangeresultOK,
			RoomrequestrolechangeresultNoResponse,
			RoomrequestrolechangeresultUnauthorized,
			RoomrequestrolechangeresultMiscLocalError,
			RoomrequestrolechangeresultMiscRemoteError
		}
		public enum RoomSearchResult{
			RoomsearchresultOK,
			RoomsearchresultNoRecords,
			RoomsearchresultNoResponse,
			RoomsearchresultUnauthorized,
			RoomsearchresultMiscLocalError,
			RoomsearchresultMiscRemoteError
		}
		public enum RoomSetFavoriteResult{
			RoomsetfavoriteresultOK,
			RoomsetfavoriteresultNoResponse,
			RoomsetfavoriteresultConflict,
			RoomsetfavoriteresultUnauthorized,
			RoomsetfavoriteresultNotAcceptable,
			RoomsetfavoriteresultNotAllowed,
			RoomsetfavoriteresultMiscLocalError,
			RoomsetfavoriteresultMiscRemoteError
		}
		public enum RoomSetPropertiesResult{
			RoomsetpropertiesresultOK,
			RoomsetpropertiesresultNoResponse,
			RoomsetpropertiesresultConflict,
			RoomsetpropertiesresultUnauthorized,
			RoomsetpropertiesresultNotAcceptable,
			RoomsetpropertiesresultNotAllowed,
			RoomsetpropertiesresultMiscLocalError,
			RoomsetpropertiesresultMiscRemoteError
		}
		public enum RoomSetRoleChangeAuthorizationResult{
			RoomsetrolechangeauthorizationresultOK,
			RoomsetrolechangeauthorizationresultNoResponse,
			RoomsetrolechangeauthorizationresultUnauthorized,
			RoomsetrolechangeauthorizationresultInvalidInput,
			RoomsetrolechangeauthorizationresultMiscLocalError,
			RoomsetrolechangeauthorizationresultMiscRemoteError
		}
		public enum RoomShowThrottle{
			RoomshowthrottleNONE,
			RoomshowthrottleTIMED,
			RoomshowthrottleWINDOWSIZE
		}
		public enum RoomState{
			RoomstateCreating,
			RoomstateCreated,
			RoomstateEntering,
			RoomstateEntered,
			RoomstateMediaRouteAcquiring,
			RoomstateMediaRouteAcquired,
			RoomstateMediaEnabling,
			RoomstateMediaEnabled,
			RoomstateMediaDisabling,
			RoomstateMediaDisabled,
			RoomstateExiting,
			RoomstateExited
		}
		public enum RoomType{
			RoomtypeUnknown,
			RoomtypeConversation,
			RoomtypeTopic,
			RoomtypeScheduled,
			RoomtypePersonal,
			RoomtypeTestCall,
			RoomtypeLegacy
		}
		public interface IAcceptIncoming{

			void OnIncomingEntered(RoomEnterResult result);
			void OnIncomingExited(RoomExitReason reason);
		}
		public interface IAcquireMediaRoute{

			void OnMediaRouteAcquired();
			void OnMediaRouteAcquireFailed(RoomMediaFailReason reason);
		}
		public interface IDelete{

			void OnDeleteResult(RoomDeleteResult result);
		}
		public interface IEnableMedia{

			void OnMediaEnabled();
			void OnMediaFailed(RoomMediaFailReason reason);
			void OnMediaDisabled(RoomMediaDisableReason reason);
		}
		public interface IEnter{

			void OnEntered(RoomEnterResult result);
			void OnExited(RoomExitReason reason);
		}
		public interface IGetHistory{

			void OnGetHistoryResults(List<ChatMessage> records, long historySize, RoomSearchResult result);
		}
		public interface IGetRoomProperties{

			void OnGetRoomPropertiesResult(RoomGetPropertiesResult result, RoomProperties roomProperties);
		}
		public interface IInvite{

			void OnInviteResult(String inviteeId, RoomInviteResult result);
		}
		public interface IMessageSearch{

			void OnMessageSearchResults(String searchText, List<ChatMessage> records, RoomSearchResult result);
		}
		public interface IRegisterMessageEventListener{

			void OnMessageReceived(Participant participant, ChatMessage chatMessage);
			void OnMessageAcknowledged(ChatMessage chatMessage);
			void OnMessageRead(Participant participant, long messageId);
			void OnMessageTypingIndication(Participant participant, ChatMessage.ChatMessageTypingIndication typingIndication);
		}
		public interface IRegisterModerationResultEventListener{

			void OnModerationResult(RoomModerationResult result, String userContext);
		}
		public interface IRegisterParticipantEventListener{

			void OnParticipantJoined(Participant participant);
			void OnParticipantLeft(Participant participant);
			void OnDynamicParticipantChanged(List<Participant> selectedParticipants);
			void OnLoudestParticipantChanged(Participant participant, Boolean isAudioOnly, Boolean isStatic);
		}
		public interface IRegisterPipEventListener{

			void OnPipLocationChanged(int x, int y, uint width, uint height, Boolean isExpanded);
		}
		public interface IRegisterRecorderInCallEventListener{

			void RecorderInCall(Boolean recorderInCall);
		}
		public interface IRegisterResourceManagerEventListener{

			void OnAvailableResourcesChanged(uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive);
			void OnMaxRemoteSourcesChanged(uint maxRemoteSources);
		}
		public interface IRegisterRoomPropertiesEventListener{

			void OnRoomPropertiesChanged(RoomProperties roomProperties);
		}
		public interface IRegisterSubjectEventListener{

			void OnSetSubject(String subject);
		}
		public interface IRegisterUnprocessedAudioEventListener{

			void OnUnprocessedAudioSupportChanged(Boolean supported);
			void OnUnprocessedAudioStarted(Boolean started);
		}
		public interface IRemoveRoleChangeAuthorization{

			void OnRemoveRoleChangeAuthorizationResult(RoomRemoveRoleChangeAuthorizationResult result, String userContext);
		}
		public interface IRequestRoleChange{

			void OnRequestRoleChangeResult(RoomRequestRoleChangeResult result, String userContext);
		}
		public interface ISetFavorite{

			void OnSetFavoriteResult(Boolean isFavorite, RoomSetFavoriteResult result);
		}
		public interface ISetRoleChangeAuthorization{

			void OnSetRoleChangeAuthorizationResult(RoomSetRoleChangeAuthorizationResult result, String userContext);
		}
		public interface ISetRoomProperties{

			void OnSetRoomPropertiesResult(RoomSetPropertiesResult result);
		}
		public class GenerationDiffFactory
		{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			public static extern IntPtr VidyoGenerationDiffConstructDefaultNative();
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			public static extern void VidyoGenerationDiffDestructNative(IntPtr obj);
			public static GenerationDiff Create()
			{
				IntPtr objPtr = VidyoGenerationDiffConstructDefaultNative();
				return new GenerationDiff(objPtr);
			}
			public static void Destroy(GenerationDiff obj)
			{
				VidyoGenerationDiffDestructNative(obj.GetObjectPtr());
			}
		}
		public class GenerationDiff{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoGenerationDiff reference.
			public IntPtr GetObjectPtr(){

				VidyoGenerationDiffSetnewIndexNative(objPtr, newIndex);
				VidyoGenerationDiffSetoldIndexNative(objPtr, oldIndex);
				VidyoGenerationDiffSetparticipantNative(objPtr, participant.GetObjectPtr());

				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern int VidyoGenerationDiffGetnewIndexNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoGenerationDiffSetnewIndexNative(IntPtr obj, int newIndex);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern int VidyoGenerationDiffGetoldIndexNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoGenerationDiffSetoldIndexNative(IntPtr obj, int oldIndex);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoGenerationDiffGetparticipantNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoGenerationDiffSetparticipantNative(IntPtr obj, IntPtr participant);

			public int newIndex;
			public int oldIndex;
			public Participant participant;
			public GenerationDiff(IntPtr obj){
				objPtr = obj;

				Participant csParticipant = null;
				if(VidyoGenerationDiffGetparticipantNative(objPtr) != IntPtr.Zero){
					if(Participant.VidyoParticipantGetUserDataNative(VidyoGenerationDiffGetparticipantNative(objPtr)) == IntPtr.Zero)
						csParticipant = new Participant(VidyoGenerationDiffGetparticipantNative(objPtr));
					else{
						GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(VidyoGenerationDiffGetparticipantNative(objPtr));
						csParticipant = (Participant)objHandle.Target;
					}
				}
				newIndex = VidyoGenerationDiffGetnewIndexNative(objPtr);
				oldIndex = VidyoGenerationDiffGetoldIndexNative(objPtr);
				participant = csParticipant;
			}
		};
		public class RoleAuthorizationFactory
		{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			public static extern IntPtr VidyoRoleAuthorizationConstructDefaultNative();
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			public static extern void VidyoRoleAuthorizationDestructNative(IntPtr obj);
			public static RoleAuthorization Create()
			{
				IntPtr objPtr = VidyoRoleAuthorizationConstructDefaultNative();
				return new RoleAuthorization(objPtr);
			}
			public static void Destroy(RoleAuthorization obj)
			{
				VidyoRoleAuthorizationDestructNative(obj.GetObjectPtr());
			}
		}
		public class RoleAuthorization{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoRoleAuthorization reference.
			public IntPtr GetObjectPtr(){
				IntPtr nPassCode = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(passCode ?? string.Empty);

				VidyoRoleAuthorizationSethasPassCodeNative(objPtr, hasPassCode);
				VidyoRoleAuthorizationSetpassCodeNative(objPtr, nPassCode);

				Marshal.FreeHGlobal(nPassCode);
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoleAuthorizationGethasPassCodeNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoleAuthorizationSethasPassCodeNative(IntPtr obj, Boolean hasPassCode);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoleAuthorizationGetpassCodeNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoleAuthorizationSetpassCodeNative(IntPtr obj, IntPtr passCode);

			public Boolean hasPassCode;
			public String passCode;
			public RoleAuthorization(IntPtr obj){
				objPtr = obj;

				hasPassCode = VidyoRoleAuthorizationGethasPassCodeNative(objPtr);
				passCode = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoleAuthorizationGetpassCodeNative(objPtr));
			}
		};
		public class RoomPropertiesFactory
		{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			public static extern IntPtr VidyoRoomPropertiesConstructDefaultNative();
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			public static extern void VidyoRoomPropertiesDestructNative(IntPtr obj);
			public static RoomProperties Create()
			{
				IntPtr objPtr = VidyoRoomPropertiesConstructDefaultNative();
				return new RoomProperties(objPtr);
			}
			public static void Destroy(RoomProperties obj)
			{
				VidyoRoomPropertiesDestructNative(obj.GetObjectPtr());
			}
		}
		public class RoomProperties{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoRoomProperties reference.
			public IntPtr GetObjectPtr(){
				IntPtr nAdministrators = Marshal.AllocHGlobal(Marshal.SizeOf<IntPtr>() * administrators.Count);
				int nAdministratorsSize = 0;
				IntPtr nCalendarInviteBody = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(calendarInviteBody ?? string.Empty);
				IntPtr nCalendarInviteHTMLBody = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(calendarInviteHTMLBody ?? string.Empty);
				IntPtr nCalendarInviteSubject = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(calendarInviteSubject ?? string.Empty);
				IntPtr nDescription = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(description ?? string.Empty);
				IntPtr nDesignatedPresenter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(designatedPresenter ?? string.Empty);
				IntPtr nLanguage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(language ?? string.Empty);
				IntPtr nLoggingLocation = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(loggingLocation ?? string.Empty);
				IntPtr nMembers = Marshal.AllocHGlobal(Marshal.SizeOf<IntPtr>() * members.Count);
				int nMembersSize = 0;
				IntPtr nModeratorUrl = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(moderatorUrl ?? string.Empty);
				IntPtr nModerators = Marshal.AllocHGlobal(Marshal.SizeOf<IntPtr>() * moderators.Count);
				int nModeratorsSize = 0;
				IntPtr nName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(name ?? string.Empty);
				IntPtr nOutcasts = Marshal.AllocHGlobal(Marshal.SizeOf<IntPtr>() * outcasts.Count);
				int nOutcastsSize = 0;
				IntPtr nOwners = Marshal.AllocHGlobal(Marshal.SizeOf<IntPtr>() * owners.Count);
				int nOwnersSize = 0;
				IntPtr nParticipantProfiles = Marshal.AllocHGlobal(Marshal.SizeOf<IntPtr>() * participantProfiles.Count);
				int nParticipantProfilesSize = 0;
				IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
				IntPtr nWebLink = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(webLink ?? string.Empty);

				foreach (String iter in administrators) {
					Marshal.WriteIntPtr(nAdministrators + (nAdministratorsSize * Marshal.SizeOf<IntPtr>()), MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(iter ?? string.Empty));
					nAdministratorsSize++;
				}
				foreach (String iter in members) {
					Marshal.WriteIntPtr(nMembers + (nMembersSize * Marshal.SizeOf<IntPtr>()), MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(iter ?? string.Empty));
					nMembersSize++;
				}
				foreach (String iter in moderators) {
					Marshal.WriteIntPtr(nModerators + (nModeratorsSize * Marshal.SizeOf<IntPtr>()), MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(iter ?? string.Empty));
					nModeratorsSize++;
				}
				foreach (String iter in outcasts) {
					Marshal.WriteIntPtr(nOutcasts + (nOutcastsSize * Marshal.SizeOf<IntPtr>()), MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(iter ?? string.Empty));
					nOutcastsSize++;
				}
				foreach (String iter in owners) {
					Marshal.WriteIntPtr(nOwners + (nOwnersSize * Marshal.SizeOf<IntPtr>()), MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(iter ?? string.Empty));
					nOwnersSize++;
				}
				foreach (RoomParticipantProfile iter in participantProfiles) {
					Marshal.WriteIntPtr(nParticipantProfiles + (nParticipantProfilesSize * Marshal.SizeOf<IntPtr>()), iter.GetObjectPtr());
					nParticipantProfilesSize++;
				}

				VidyoRoomPropertiesSetadministratorsNative(objPtr, nAdministrators, nAdministratorsSize);
				VidyoRoomPropertiesSetcalendarInviteBodyNative(objPtr, nCalendarInviteBody);
				VidyoRoomPropertiesSetcalendarInviteHTMLBodyNative(objPtr, nCalendarInviteHTMLBody);
				VidyoRoomPropertiesSetcalendarInviteSubjectNative(objPtr, nCalendarInviteSubject);
				VidyoRoomPropertiesSetcreationTimeNative(objPtr, creationTime);
				VidyoRoomPropertiesSetdefaultProfileNative(objPtr, defaultProfile.GetObjectPtr());
				VidyoRoomPropertiesSetdescriptionNative(objPtr, nDescription);
				VidyoRoomPropertiesSetdesignatedPresenterNative(objPtr, nDesignatedPresenter);
				VidyoRoomPropertiesSethasCalendarInviteTextNative(objPtr, hasCalendarInviteText);
				VidyoRoomPropertiesSethasPasswordNative(objPtr, hasPassword);
				VidyoRoomPropertiesSetisBroadcastingEnabledNative(objPtr, isBroadcastingEnabled);
				VidyoRoomPropertiesSetisLoggingEnabledNative(objPtr, isLoggingEnabled);
				VidyoRoomPropertiesSetisLoggingPausedNative(objPtr, isLoggingPaused);
				VidyoRoomPropertiesSetisLoggingSupportedNative(objPtr, isLoggingSupported);
				VidyoRoomPropertiesSetisMembersOnlyNative(objPtr, isMembersOnly);
				VidyoRoomPropertiesSetisModeratedNative(objPtr, isModerated);
				VidyoRoomPropertiesSetisPasswordProtectedNative(objPtr, isPasswordProtected);
				VidyoRoomPropertiesSetisPeertoPeerCallWithLegacyNative(objPtr, isPeertoPeerCallWithLegacy);
				VidyoRoomPropertiesSetisPublicNative(objPtr, isPublic);
				VidyoRoomPropertiesSetisRoleChangeAllowedNative(objPtr, isRoleChangeAllowed);
				VidyoRoomPropertiesSetisSecureNative(objPtr, isSecure);
				VidyoRoomPropertiesSetisWaitingRoomEnabledNative(objPtr, isWaitingRoomEnabled);
				VidyoRoomPropertiesSetlanguageNative(objPtr, nLanguage);
				VidyoRoomPropertiesSetloggingLocationNative(objPtr, nLoggingLocation);
				VidyoRoomPropertiesSetmaxParticipantsNative(objPtr, maxParticipants);
				VidyoRoomPropertiesSetmembersNative(objPtr, nMembers, nMembersSize);
				VidyoRoomPropertiesSetmoderatorUrlNative(objPtr, nModeratorUrl);
				VidyoRoomPropertiesSetmoderatorsNative(objPtr, nModerators, nModeratorsSize);
				VidyoRoomPropertiesSetnameNative(objPtr, nName);
				VidyoRoomPropertiesSetoutcastsNative(objPtr, nOutcasts, nOutcastsSize);
				VidyoRoomPropertiesSetownersNative(objPtr, nOwners, nOwnersSize);
				VidyoRoomPropertiesSetparticipantProfilesNative(objPtr, nParticipantProfiles, nParticipantProfilesSize);
				VidyoRoomPropertiesSetpasswordNative(objPtr, nPassword);
				VidyoRoomPropertiesSetscheduleNative(objPtr, schedule.GetObjectPtr());
				VidyoRoomPropertiesSetwebLinkNative(objPtr, nWebLink);

				for (int i = 0; i < nAdministratorsSize; i++) {
					Marshal.FreeHGlobal(Marshal.ReadIntPtr(nAdministrators + (i * Marshal.SizeOf<IntPtr>())));
				}
				for (int i = 0; i < nMembersSize; i++) {
					Marshal.FreeHGlobal(Marshal.ReadIntPtr(nMembers + (i * Marshal.SizeOf<IntPtr>())));
				}
				for (int i = 0; i < nModeratorsSize; i++) {
					Marshal.FreeHGlobal(Marshal.ReadIntPtr(nModerators + (i * Marshal.SizeOf<IntPtr>())));
				}
				for (int i = 0; i < nOutcastsSize; i++) {
					Marshal.FreeHGlobal(Marshal.ReadIntPtr(nOutcasts + (i * Marshal.SizeOf<IntPtr>())));
				}
				for (int i = 0; i < nOwnersSize; i++) {
					Marshal.FreeHGlobal(Marshal.ReadIntPtr(nOwners + (i * Marshal.SizeOf<IntPtr>())));
				}

				Marshal.FreeHGlobal(nWebLink);
				Marshal.FreeHGlobal(nPassword);
				Marshal.FreeHGlobal(nParticipantProfiles);
				Marshal.FreeHGlobal(nOwners);
				Marshal.FreeHGlobal(nOutcasts);
				Marshal.FreeHGlobal(nName);
				Marshal.FreeHGlobal(nModerators);
				Marshal.FreeHGlobal(nModeratorUrl);
				Marshal.FreeHGlobal(nMembers);
				Marshal.FreeHGlobal(nLoggingLocation);
				Marshal.FreeHGlobal(nLanguage);
				Marshal.FreeHGlobal(nDesignatedPresenter);
				Marshal.FreeHGlobal(nDescription);
				Marshal.FreeHGlobal(nCalendarInviteSubject);
				Marshal.FreeHGlobal(nCalendarInviteHTMLBody);
				Marshal.FreeHGlobal(nCalendarInviteBody);
				Marshal.FreeHGlobal(nAdministrators);
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetadministratorsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetadministratorsNative(IntPtr obj, IntPtr administrators, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetadministratorsArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeadministratorsArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetcalendarInviteBodyNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetcalendarInviteBodyNative(IntPtr obj, IntPtr calendarInviteBody);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetcalendarInviteHTMLBodyNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetcalendarInviteHTMLBodyNative(IntPtr obj, IntPtr calendarInviteHTMLBody);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetcalendarInviteSubjectNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetcalendarInviteSubjectNative(IntPtr obj, IntPtr calendarInviteSubject);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern ulong VidyoRoomPropertiesGetcreationTimeNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetcreationTimeNative(IntPtr obj, ulong creationTime);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetdefaultProfileNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetdefaultProfileNative(IntPtr obj, IntPtr defaultProfile);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetdescriptionNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetdescriptionNative(IntPtr obj, IntPtr description);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetdesignatedPresenterNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetdesignatedPresenterNative(IntPtr obj, IntPtr designatedPresenter);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGethasCalendarInviteTextNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSethasCalendarInviteTextNative(IntPtr obj, Boolean hasCalendarInviteText);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGethasPasswordNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSethasPasswordNative(IntPtr obj, Boolean hasPassword);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisBroadcastingEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisBroadcastingEnabledNative(IntPtr obj, Boolean isBroadcastingEnabled);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisLoggingEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisLoggingEnabledNative(IntPtr obj, Boolean isLoggingEnabled);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisLoggingPausedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisLoggingPausedNative(IntPtr obj, Boolean isLoggingPaused);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisLoggingSupportedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisLoggingSupportedNative(IntPtr obj, Boolean isLoggingSupported);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisMembersOnlyNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisMembersOnlyNative(IntPtr obj, Boolean isMembersOnly);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisModeratedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisModeratedNative(IntPtr obj, Boolean isModerated);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisPasswordProtectedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisPasswordProtectedNative(IntPtr obj, Boolean isPasswordProtected);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisPeertoPeerCallWithLegacyNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisPeertoPeerCallWithLegacyNative(IntPtr obj, Boolean isPeertoPeerCallWithLegacy);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisPublicNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisPublicNative(IntPtr obj, Boolean isPublic);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisRoleChangeAllowedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisRoleChangeAllowedNative(IntPtr obj, Boolean isRoleChangeAllowed);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisSecureNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisSecureNative(IntPtr obj, Boolean isSecure);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern Boolean VidyoRoomPropertiesGetisWaitingRoomEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			[return: MarshalAs(UnmanagedType.I1)]
			private static extern void VidyoRoomPropertiesSetisWaitingRoomEnabledNative(IntPtr obj, Boolean isWaitingRoomEnabled);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetlanguageNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetlanguageNative(IntPtr obj, IntPtr language);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetloggingLocationNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetloggingLocationNative(IntPtr obj, IntPtr loggingLocation);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern uint VidyoRoomPropertiesGetmaxParticipantsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetmaxParticipantsNative(IntPtr obj, uint maxParticipants);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmembersNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetmembersNative(IntPtr obj, IntPtr members, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmembersArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreemembersArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmoderatorUrlNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetmoderatorUrlNative(IntPtr obj, IntPtr moderatorUrl);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmoderatorsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetmoderatorsNative(IntPtr obj, IntPtr moderators, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmoderatorsArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreemoderatorsArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetnameNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetnameNative(IntPtr obj, IntPtr name);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetoutcastsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetoutcastsNative(IntPtr obj, IntPtr outcasts, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetoutcastsArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeoutcastsArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetownersNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetownersNative(IntPtr obj, IntPtr owners, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetownersArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeownersArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetparticipantProfilesNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetparticipantProfilesNative(IntPtr obj, IntPtr participantProfiles, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetparticipantProfilesArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeparticipantProfilesArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetpasswordNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetpasswordNative(IntPtr obj, IntPtr password);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetscheduleNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetscheduleNative(IntPtr obj, IntPtr schedule);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetwebLinkNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesSetwebLinkNative(IntPtr obj, IntPtr webLink);

			public class RoomParticipantProfileFactory
			{
#if __IOS__
				const string importLib = "__Internal";
#else
				const string importLib = "libVidyoClient";
#endif
				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				public static extern IntPtr VidyoRoomParticipantProfileConstructDefaultNative();
				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				public static extern void VidyoRoomParticipantProfileDestructNative(IntPtr obj);
				public static RoomParticipantProfile Create()
				{
					IntPtr objPtr = VidyoRoomParticipantProfileConstructDefaultNative();
					return new RoomParticipantProfile(objPtr);
				}
				public static void Destroy(RoomParticipantProfile obj)
				{
					VidyoRoomParticipantProfileDestructNative(obj.GetObjectPtr());
				}
			}
			public class RoomParticipantProfile{
#if __IOS__
				const string importLib = "__Internal";
#else
				const string importLib = "libVidyoClient";
#endif
				private IntPtr objPtr; // opaque VidyoRoomParticipantProfile reference.
				public IntPtr GetObjectPtr(){
					IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);

					VidyoRoomParticipantProfileSetcameraNative(objPtr, camera);
					VidyoRoomParticipantProfileSetchatNative(objPtr, chat);
					VidyoRoomParticipantProfileSetmicrophoneNative(objPtr, microphone);
					VidyoRoomParticipantProfileSetuserIdNative(objPtr, nUserId);
					VidyoRoomParticipantProfileSetwindowShareNative(objPtr, windowShare);

					Marshal.FreeHGlobal(nUserId);
					return objPtr;
				}
				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetcameraNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern void VidyoRoomParticipantProfileSetcameraNative(IntPtr obj, Room.RoomProfileControlMode camera);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetchatNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern void VidyoRoomParticipantProfileSetchatNative(IntPtr obj, Room.RoomProfileControlMode chat);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetmicrophoneNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern void VidyoRoomParticipantProfileSetmicrophoneNative(IntPtr obj, Room.RoomProfileControlMode microphone);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				private static extern IntPtr VidyoRoomParticipantProfileGetuserIdNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				private static extern void VidyoRoomParticipantProfileSetuserIdNative(IntPtr obj, IntPtr userId);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetwindowShareNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern void VidyoRoomParticipantProfileSetwindowShareNative(IntPtr obj, Room.RoomProfileControlMode windowShare);

				public Room.RoomProfileControlMode camera;
				public Room.RoomProfileControlMode chat;
				public Room.RoomProfileControlMode microphone;
				public String userId;
				public Room.RoomProfileControlMode windowShare;
				public RoomParticipantProfile(IntPtr obj){
					objPtr = obj;

					camera = VidyoRoomParticipantProfileGetcameraNative(objPtr);
					chat = VidyoRoomParticipantProfileGetchatNative(objPtr);
					microphone = VidyoRoomParticipantProfileGetmicrophoneNative(objPtr);
					userId = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomParticipantProfileGetuserIdNative(objPtr));
					windowShare = VidyoRoomParticipantProfileGetwindowShareNative(objPtr);
				}
			};
			public List<String> administrators;
			public String calendarInviteBody;
			public String calendarInviteHTMLBody;
			public String calendarInviteSubject;
			public ulong creationTime;
			public RoomParticipantProfile defaultProfile;
			public String description;
			public String designatedPresenter;
			public Boolean hasCalendarInviteText;
			public Boolean hasPassword;
			public Boolean isBroadcastingEnabled;
			public Boolean isLoggingEnabled;
			public Boolean isLoggingPaused;
			public Boolean isLoggingSupported;
			public Boolean isMembersOnly;
			public Boolean isModerated;
			public Boolean isPasswordProtected;
			public Boolean isPeertoPeerCallWithLegacy;
			public Boolean isPublic;
			public Boolean isRoleChangeAllowed;
			public Boolean isSecure;
			public Boolean isWaitingRoomEnabled;
			public String language;
			public String loggingLocation;
			public uint maxParticipants;
			public List<String> members;
			public String moderatorUrl;
			public List<String> moderators;
			public String name;
			public List<String> outcasts;
			public List<String> owners;
			public List<RoomParticipantProfile> participantProfiles;
			public String password;
			public EventSchedule schedule;
			public String webLink;
			public RoomProperties(IntPtr obj){
				objPtr = obj;

				List<String> csAdministrators = new List<String>();
				int nAdministratorsSize = 0;
				IntPtr nAdministrators = VidyoRoomPropertiesGetadministratorsArrayNative(VidyoRoomPropertiesGetadministratorsNative(objPtr), ref nAdministratorsSize);
				int nAdministratorsIndex = 0;
				while (nAdministratorsIndex < nAdministratorsSize) {
					csAdministrators.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nAdministrators + (nAdministratorsIndex * Marshal.SizeOf(nAdministrators)))));
					nAdministratorsIndex++;
				}

				RoomParticipantProfile csDefaultProfile = new RoomParticipantProfile(VidyoRoomPropertiesGetdefaultProfileNative(objPtr));
				List<String> csMembers = new List<String>();
				int nMembersSize = 0;
				IntPtr nMembers = VidyoRoomPropertiesGetmembersArrayNative(VidyoRoomPropertiesGetmembersNative(objPtr), ref nMembersSize);
				int nMembersIndex = 0;
				while (nMembersIndex < nMembersSize) {
					csMembers.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nMembers + (nMembersIndex * Marshal.SizeOf(nMembers)))));
					nMembersIndex++;
				}

				List<String> csModerators = new List<String>();
				int nModeratorsSize = 0;
				IntPtr nModerators = VidyoRoomPropertiesGetmoderatorsArrayNative(VidyoRoomPropertiesGetmoderatorsNative(objPtr), ref nModeratorsSize);
				int nModeratorsIndex = 0;
				while (nModeratorsIndex < nModeratorsSize) {
					csModerators.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nModerators + (nModeratorsIndex * Marshal.SizeOf(nModerators)))));
					nModeratorsIndex++;
				}

				List<String> csOutcasts = new List<String>();
				int nOutcastsSize = 0;
				IntPtr nOutcasts = VidyoRoomPropertiesGetoutcastsArrayNative(VidyoRoomPropertiesGetoutcastsNative(objPtr), ref nOutcastsSize);
				int nOutcastsIndex = 0;
				while (nOutcastsIndex < nOutcastsSize) {
					csOutcasts.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nOutcasts + (nOutcastsIndex * Marshal.SizeOf(nOutcasts)))));
					nOutcastsIndex++;
				}

				List<String> csOwners = new List<String>();
				int nOwnersSize = 0;
				IntPtr nOwners = VidyoRoomPropertiesGetownersArrayNative(VidyoRoomPropertiesGetownersNative(objPtr), ref nOwnersSize);
				int nOwnersIndex = 0;
				while (nOwnersIndex < nOwnersSize) {
					csOwners.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nOwners + (nOwnersIndex * Marshal.SizeOf(nOwners)))));
					nOwnersIndex++;
				}

				List<RoomParticipantProfile> csParticipantProfiles = new List<RoomParticipantProfile>();
				int nParticipantProfilesSize = 0;
				IntPtr nParticipantProfiles = VidyoRoomPropertiesGetparticipantProfilesArrayNative(VidyoRoomPropertiesGetparticipantProfilesNative(objPtr), ref nParticipantProfilesSize);
				int nParticipantProfilesIndex = 0;
				while (nParticipantProfilesIndex < nParticipantProfilesSize) {
					RoomParticipantProfile csTparticipantProfiles = new RoomParticipantProfile(Marshal.ReadIntPtr(nParticipantProfiles + (nParticipantProfilesIndex * Marshal.SizeOf(nParticipantProfiles))));
					csParticipantProfiles.Add(csTparticipantProfiles);
					nParticipantProfilesIndex++;
				}

				EventSchedule csSchedule = new EventSchedule(VidyoRoomPropertiesGetscheduleNative(objPtr));
				administrators = csAdministrators;
				calendarInviteBody = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetcalendarInviteBodyNative(objPtr));
				calendarInviteHTMLBody = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetcalendarInviteHTMLBodyNative(objPtr));
				calendarInviteSubject = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetcalendarInviteSubjectNative(objPtr));
				creationTime = VidyoRoomPropertiesGetcreationTimeNative(objPtr);
				defaultProfile = csDefaultProfile;
				description = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetdescriptionNative(objPtr));
				designatedPresenter = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetdesignatedPresenterNative(objPtr));
				hasCalendarInviteText = VidyoRoomPropertiesGethasCalendarInviteTextNative(objPtr);
				hasPassword = VidyoRoomPropertiesGethasPasswordNative(objPtr);
				isBroadcastingEnabled = VidyoRoomPropertiesGetisBroadcastingEnabledNative(objPtr);
				isLoggingEnabled = VidyoRoomPropertiesGetisLoggingEnabledNative(objPtr);
				isLoggingPaused = VidyoRoomPropertiesGetisLoggingPausedNative(objPtr);
				isLoggingSupported = VidyoRoomPropertiesGetisLoggingSupportedNative(objPtr);
				isMembersOnly = VidyoRoomPropertiesGetisMembersOnlyNative(objPtr);
				isModerated = VidyoRoomPropertiesGetisModeratedNative(objPtr);
				isPasswordProtected = VidyoRoomPropertiesGetisPasswordProtectedNative(objPtr);
				isPeertoPeerCallWithLegacy = VidyoRoomPropertiesGetisPeertoPeerCallWithLegacyNative(objPtr);
				isPublic = VidyoRoomPropertiesGetisPublicNative(objPtr);
				isRoleChangeAllowed = VidyoRoomPropertiesGetisRoleChangeAllowedNative(objPtr);
				isSecure = VidyoRoomPropertiesGetisSecureNative(objPtr);
				isWaitingRoomEnabled = VidyoRoomPropertiesGetisWaitingRoomEnabledNative(objPtr);
				language = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetlanguageNative(objPtr));
				loggingLocation = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetloggingLocationNative(objPtr));
				maxParticipants = VidyoRoomPropertiesGetmaxParticipantsNative(objPtr);
				members = csMembers;
				moderatorUrl = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetmoderatorUrlNative(objPtr));
				moderators = csModerators;
				name = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetnameNative(objPtr));
				outcasts = csOutcasts;
				owners = csOwners;
				participantProfiles = csParticipantProfiles;
				password = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetpasswordNative(objPtr));
				schedule = csSchedule;
				webLink = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetwebLinkNative(objPtr));
				VidyoRoomPropertiesFreeparticipantProfilesArrayNative(nParticipantProfiles, nParticipantProfilesSize);
				VidyoRoomPropertiesFreeownersArrayNative(nOwners, nOwnersSize);
				VidyoRoomPropertiesFreeoutcastsArrayNative(nOutcasts, nOutcastsSize);
				VidyoRoomPropertiesFreemoderatorsArrayNative(nModerators, nModeratorsSize);
				VidyoRoomPropertiesFreemembersArrayNative(nMembers, nMembersSize);
				VidyoRoomPropertiesFreeadministratorsArrayNative(nAdministrators, nAdministratorsSize);
			}
		};
		private IAcceptIncoming _mIAcceptIncoming;
		private IAcquireMediaRoute _mIAcquireMediaRoute;
		private IDelete _mIDelete;
		private IEnableMedia _mIEnableMedia;
		private IEnter _mIEnter;
		private IGetHistory _mIGetHistory;
		private IGetRoomProperties _mIGetRoomProperties;
		private IInvite _mIInvite;
		private IMessageSearch _mIMessageSearch;
		private IRegisterMessageEventListener _mIRegisterMessageEventListener;
		private IRegisterModerationResultEventListener _mIRegisterModerationResultEventListener;
		private IRegisterParticipantEventListener _mIRegisterParticipantEventListener;
		private IRegisterPipEventListener _mIRegisterPipEventListener;
		private IRegisterRecorderInCallEventListener _mIRegisterRecorderInCallEventListener;
		private IRegisterResourceManagerEventListener _mIRegisterResourceManagerEventListener;
		private IRegisterRoomPropertiesEventListener _mIRegisterRoomPropertiesEventListener;
		private IRegisterSubjectEventListener _mIRegisterSubjectEventListener;
		private IRegisterUnprocessedAudioEventListener _mIRegisterUnprocessedAudioEventListener;
		private IRemoveRoleChangeAuthorization _mIRemoveRoleChangeAuthorization;
		private IRequestRoleChange _mIRequestRoleChange;
		private ISetFavorite _mISetFavorite;
		private ISetRoleChangeAuthorization _mISetRoleChangeAuthorization;
		private ISetRoomProperties _mISetRoomProperties;
		public Room(IntPtr other){
			objPtr = VidyoRoomConstructCopyNative(other);
			VidyoRoomSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~Room(){
			Dispose(false);
		}
		public void Dispose(){
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		public void Dispose(bool disposing){
			if(!disposed){
				if(objPtr != IntPtr.Zero){
					VidyoRoomSetUserDataNative(objPtr, IntPtr.Zero);
					VidyoRoomDestructNative(objPtr);
				}
				disposed = true;
			}
		}

		public Boolean AcceptIncoming(IAcceptIncoming _iIAcceptIncoming){
			_mIAcceptIncoming = _iIAcceptIncoming;
			_mOnIncomingEntered = OnIncomingEnteredDelegate;
			_mOnIncomingExited = OnIncomingExitedDelegate;

			Boolean ret = VidyoRoomAcceptIncomingNative(objPtr, _mOnIncomingEntered, _mOnIncomingExited);

			return ret;
		}
		public Boolean AcquireMediaRoute(IAcquireMediaRoute _iIAcquireMediaRoute){
			_mIAcquireMediaRoute = _iIAcquireMediaRoute;
			_mOnMediaRouteAcquired = OnMediaRouteAcquiredDelegate;
			_mOnMediaRouteAcquireFailed = OnMediaRouteAcquireFailedDelegate;

			Boolean ret = VidyoRoomAcquireMediaRouteNative(objPtr, _mOnMediaRouteAcquired, _mOnMediaRouteAcquireFailed);

			return ret;
		}
		public void AddLocalCamera(LocalCamera localCamera, Boolean removeOthers){

			VidyoRoomAddLocalCameraNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddLocalMicrophone(LocalMicrophone localMicrophone, Boolean removeOthers, Boolean isAES){

			VidyoRoomAddLocalMicrophoneNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero, removeOthers, isAES);
		}
		public void AddLocalMonitor(LocalMonitor localMonitor, Boolean removeOthers){

			VidyoRoomAddLocalMonitorNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddLocalRenderer(LocalRenderer localRenderer, Boolean removeOthers){

			VidyoRoomAddLocalRendererNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddLocalSpeaker(LocalSpeaker localSpeaker, Boolean removeOthers, Boolean isAES){

			VidyoRoomAddLocalSpeakerNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero, removeOthers, isAES);
		}
		public void AddLocalWindowShare(LocalWindowShare localWindowShare, Boolean removeOthers){

			VidyoRoomAddLocalWindowShareNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddVirtualVideoSource(VirtualVideoSource virtualVideoSource, Boolean removeOthers){

			VidyoRoomAddVirtualVideoSourceNative(objPtr, (virtualVideoSource != null) ? virtualVideoSource.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddVirtualWindowShare(VirtualWindowShare virtualWindowShare, Boolean removeOthers){

			VidyoRoomAddVirtualWindowShareNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public Boolean BootAllParticipants(String reason){

			IntPtr nReason = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(reason ?? string.Empty);
			Boolean ret = VidyoRoomBootAllParticipantsNative(objPtr, nReason);
			Marshal.FreeHGlobal(nReason);

			return ret;
		}
		public Boolean BootParticipant(String userId, String reason){

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nReason = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(reason ?? string.Empty);
			Boolean ret = VidyoRoomBootParticipantNative(objPtr, nUserId, nReason);
			Marshal.FreeHGlobal(nReason);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public Boolean CancelInvite(String inviteeId){

			IntPtr nInviteeId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(inviteeId ?? string.Empty);
			Boolean ret = VidyoRoomCancelInviteNative(objPtr, nInviteeId);
			Marshal.FreeHGlobal(nInviteeId);

			return ret;
		}
		public void Delete(IDelete _iIDelete){
			_mIDelete = _iIDelete;
			_mOnDeleteResult = OnDeleteResultDelegate;

			VidyoRoomDeleteNative(objPtr, _mOnDeleteResult);
		}
		public Boolean DisableMedia(){

			Boolean ret = VidyoRoomDisableMediaNative(objPtr);

			return ret;
		}
		public Boolean EnableMedia(IEnableMedia _iIEnableMedia){
			_mIEnableMedia = _iIEnableMedia;
			_mOnMediaEnabled = OnMediaEnabledDelegate;
			_mOnMediaFailed = OnMediaFailedDelegate;
			_mOnMediaDisabled = OnMediaDisabledDelegate;

			Boolean ret = VidyoRoomEnableMediaNative(objPtr, _mOnMediaEnabled, _mOnMediaFailed, _mOnMediaDisabled);

			return ret;
		}
		public Boolean Enter(String password, IEnter _iIEnter){
			_mIEnter = _iIEnter;
			_mOnEntered = OnEnteredDelegate;
			_mOnExited = OnExitedDelegate;

			IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
			Boolean ret = VidyoRoomEnterNative(objPtr, nPassword, _mOnEntered, _mOnExited);
			Marshal.FreeHGlobal(nPassword);

			return ret;
		}
		public Boolean GetHistory(uint numMessages, IGetHistory _iIGetHistory){
			_mIGetHistory = _iIGetHistory;
			_mOnGetHistoryResults = OnGetHistoryResultsDelegate;

			Boolean ret = VidyoRoomGetHistoryNative(objPtr, numMessages, _mOnGetHistoryResults);

			return ret;
		}
		public Boolean GetHistoryById(long messageId, uint numMessagesBefore, uint numMessagesAfter, IGetHistory _iIGetHistory){
			_mIGetHistory = _iIGetHistory;
			_mOnGetHistoryResults = OnGetHistoryResultsDelegate;

			Boolean ret = VidyoRoomGetHistoryByIdNative(objPtr, messageId, numMessagesBefore, numMessagesAfter, _mOnGetHistoryResults);

			return ret;
		}
		public Boolean GetHistoryByTime(ulong time, uint numMessagesBefore, uint numMessagesAfter, IGetHistory _iIGetHistory){
			_mIGetHistory = _iIGetHistory;
			_mOnGetHistoryResults = OnGetHistoryResultsDelegate;

			Boolean ret = VidyoRoomGetHistoryByTimeNative(objPtr, time, numMessagesBefore, numMessagesAfter, _mOnGetHistoryResults);

			return ret;
		}
		public String GetId(){

			IntPtr ret = VidyoRoomGetIdNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public Boolean GetRoomProperties(IGetRoomProperties _iIGetRoomProperties){
			_mIGetRoomProperties = _iIGetRoomProperties;
			_mOnGetRoomPropertiesResult = OnGetRoomPropertiesResultDelegate;

			Boolean ret = VidyoRoomGetRoomPropertiesNative(objPtr, _mOnGetRoomPropertiesResult);

			return ret;
		}
		public void GetSelectedLocalCameras(ref List<LocalCamera> cameras){

			IntPtr nListCameras = VidyoRoomVectorVidyoLocalCameraAllocateNative();

			VidyoRoomGetSelectedLocalCamerasNative(objPtr, nListCameras);

			List<LocalCamera> csCameras = new List<LocalCamera>();
			int nCamerasSize = 0;
			IntPtr nCameras = VidyoRoomGetSelectedLocalCamerasGetcamerasArrayNative(nListCameras, ref nCamerasSize);
			int nCamerasIndex = 0;
			while (nCamerasIndex < nCamerasSize) {
				LocalCamera csTcameras = null;
				if(Marshal.ReadIntPtr(nCameras + (nCamerasIndex * Marshal.SizeOf(nCameras))) != IntPtr.Zero){
					if(LocalCamera.VidyoLocalCameraGetUserDataNative(Marshal.ReadIntPtr(nCameras + (nCamerasIndex * Marshal.SizeOf(nCameras)))) == IntPtr.Zero)
						csTcameras = new LocalCamera(Marshal.ReadIntPtr(nCameras + (nCamerasIndex * Marshal.SizeOf(nCameras))));
					else{
						GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(Marshal.ReadIntPtr(nCameras + (nCamerasIndex * Marshal.SizeOf(nCameras))));
						csTcameras = (LocalCamera)objHandle.Target;
					}
				}
				csCameras.Add(csTcameras);
				nCamerasIndex++;
			}

			cameras = csCameras;
			VidyoRoomGetSelectedLocalCamerasFreecamerasArrayNative(nCameras, nCamerasSize);
			VidyoRoomVectorVidyoLocalCameraDeallocateNative(nListCameras);
		}
		public void GetSelectedLocalMicrophones(ref List<LocalMicrophone> mics){

			IntPtr nListMics = VidyoRoomVectorVidyoLocalMicrophoneAllocateNative();

			VidyoRoomGetSelectedLocalMicrophonesNative(objPtr, nListMics);

			List<LocalMicrophone> csMics = new List<LocalMicrophone>();
			int nMicsSize = 0;
			IntPtr nMics = VidyoRoomGetSelectedLocalMicrophonesGetmicsArrayNative(nListMics, ref nMicsSize);
			int nMicsIndex = 0;
			while (nMicsIndex < nMicsSize) {
				LocalMicrophone csTmics = null;
				if(Marshal.ReadIntPtr(nMics + (nMicsIndex * Marshal.SizeOf(nMics))) != IntPtr.Zero){
					if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(Marshal.ReadIntPtr(nMics + (nMicsIndex * Marshal.SizeOf(nMics)))) == IntPtr.Zero)
						csTmics = new LocalMicrophone(Marshal.ReadIntPtr(nMics + (nMicsIndex * Marshal.SizeOf(nMics))));
					else{
						GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(Marshal.ReadIntPtr(nMics + (nMicsIndex * Marshal.SizeOf(nMics))));
						csTmics = (LocalMicrophone)objHandle.Target;
					}
				}
				csMics.Add(csTmics);
				nMicsIndex++;
			}

			mics = csMics;
			VidyoRoomGetSelectedLocalMicrophonesFreemicsArrayNative(nMics, nMicsSize);
			VidyoRoomVectorVidyoLocalMicrophoneDeallocateNative(nListMics);
		}
		public void GetSelectedLocalMonitors(ref List<LocalMonitor> monitors){

			IntPtr nListMonitors = VidyoRoomVectorVidyoLocalMonitorAllocateNative();

			VidyoRoomGetSelectedLocalMonitorsNative(objPtr, nListMonitors);

			List<LocalMonitor> csMonitors = new List<LocalMonitor>();
			int nMonitorsSize = 0;
			IntPtr nMonitors = VidyoRoomGetSelectedLocalMonitorsGetmonitorsArrayNative(nListMonitors, ref nMonitorsSize);
			int nMonitorsIndex = 0;
			while (nMonitorsIndex < nMonitorsSize) {
				LocalMonitor csTmonitors = null;
				if(Marshal.ReadIntPtr(nMonitors + (nMonitorsIndex * Marshal.SizeOf(nMonitors))) != IntPtr.Zero){
					if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(Marshal.ReadIntPtr(nMonitors + (nMonitorsIndex * Marshal.SizeOf(nMonitors)))) == IntPtr.Zero)
						csTmonitors = new LocalMonitor(Marshal.ReadIntPtr(nMonitors + (nMonitorsIndex * Marshal.SizeOf(nMonitors))));
					else{
						GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(Marshal.ReadIntPtr(nMonitors + (nMonitorsIndex * Marshal.SizeOf(nMonitors))));
						csTmonitors = (LocalMonitor)objHandle.Target;
					}
				}
				csMonitors.Add(csTmonitors);
				nMonitorsIndex++;
			}

			monitors = csMonitors;
			VidyoRoomGetSelectedLocalMonitorsFreemonitorsArrayNative(nMonitors, nMonitorsSize);
			VidyoRoomVectorVidyoLocalMonitorDeallocateNative(nListMonitors);
		}
		public void GetSelectedLocalRenderers(ref List<LocalRenderer> renderers){

			IntPtr nListRenderers = VidyoRoomVectorVidyoLocalRendererAllocateNative();

			VidyoRoomGetSelectedLocalRenderersNative(objPtr, nListRenderers);

			List<LocalRenderer> csRenderers = new List<LocalRenderer>();
			int nRenderersSize = 0;
			IntPtr nRenderers = VidyoRoomGetSelectedLocalRenderersGetrenderersArrayNative(nListRenderers, ref nRenderersSize);
			int nRenderersIndex = 0;
			while (nRenderersIndex < nRenderersSize) {
				LocalRenderer csTrenderers = null;
				if(Marshal.ReadIntPtr(nRenderers + (nRenderersIndex * Marshal.SizeOf(nRenderers))) != IntPtr.Zero){
					if(LocalRenderer.VidyoLocalRendererGetUserDataNative(Marshal.ReadIntPtr(nRenderers + (nRenderersIndex * Marshal.SizeOf(nRenderers)))) == IntPtr.Zero)
						csTrenderers = new LocalRenderer(Marshal.ReadIntPtr(nRenderers + (nRenderersIndex * Marshal.SizeOf(nRenderers))));
					else{
						GCHandle objHandle = (GCHandle)LocalRenderer.VidyoLocalRendererGetUserDataNative(Marshal.ReadIntPtr(nRenderers + (nRenderersIndex * Marshal.SizeOf(nRenderers))));
						csTrenderers = (LocalRenderer)objHandle.Target;
					}
				}
				csRenderers.Add(csTrenderers);
				nRenderersIndex++;
			}

			renderers = csRenderers;
			VidyoRoomGetSelectedLocalRenderersFreerenderersArrayNative(nRenderers, nRenderersSize);
			VidyoRoomVectorVidyoLocalRendererDeallocateNative(nListRenderers);
		}
		public void GetSelectedLocalSpeakers(ref List<LocalSpeaker> speakers){

			IntPtr nListSpeakers = VidyoRoomVectorVidyoLocalSpeakerAllocateNative();

			VidyoRoomGetSelectedLocalSpeakersNative(objPtr, nListSpeakers);

			List<LocalSpeaker> csSpeakers = new List<LocalSpeaker>();
			int nSpeakersSize = 0;
			IntPtr nSpeakers = VidyoRoomGetSelectedLocalSpeakersGetspeakersArrayNative(nListSpeakers, ref nSpeakersSize);
			int nSpeakersIndex = 0;
			while (nSpeakersIndex < nSpeakersSize) {
				LocalSpeaker csTspeakers = null;
				if(Marshal.ReadIntPtr(nSpeakers + (nSpeakersIndex * Marshal.SizeOf(nSpeakers))) != IntPtr.Zero){
					if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(Marshal.ReadIntPtr(nSpeakers + (nSpeakersIndex * Marshal.SizeOf(nSpeakers)))) == IntPtr.Zero)
						csTspeakers = new LocalSpeaker(Marshal.ReadIntPtr(nSpeakers + (nSpeakersIndex * Marshal.SizeOf(nSpeakers))));
					else{
						GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(Marshal.ReadIntPtr(nSpeakers + (nSpeakersIndex * Marshal.SizeOf(nSpeakers))));
						csTspeakers = (LocalSpeaker)objHandle.Target;
					}
				}
				csSpeakers.Add(csTspeakers);
				nSpeakersIndex++;
			}

			speakers = csSpeakers;
			VidyoRoomGetSelectedLocalSpeakersFreespeakersArrayNative(nSpeakers, nSpeakersSize);
			VidyoRoomVectorVidyoLocalSpeakerDeallocateNative(nListSpeakers);
		}
		public void GetSelectedLocalWindowShares(ref List<LocalWindowShare> windowShares){

			IntPtr nListWindowShares = VidyoRoomVectorVidyoLocalWindowShareAllocateNative();

			VidyoRoomGetSelectedLocalWindowSharesNative(objPtr, nListWindowShares);

			List<LocalWindowShare> csWindowShares = new List<LocalWindowShare>();
			int nWindowSharesSize = 0;
			IntPtr nWindowShares = VidyoRoomGetSelectedLocalWindowSharesGetwindowSharesArrayNative(nListWindowShares, ref nWindowSharesSize);
			int nWindowSharesIndex = 0;
			while (nWindowSharesIndex < nWindowSharesSize) {
				LocalWindowShare csTwindowShares = null;
				if(Marshal.ReadIntPtr(nWindowShares + (nWindowSharesIndex * Marshal.SizeOf(nWindowShares))) != IntPtr.Zero){
					if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(Marshal.ReadIntPtr(nWindowShares + (nWindowSharesIndex * Marshal.SizeOf(nWindowShares)))) == IntPtr.Zero)
						csTwindowShares = new LocalWindowShare(Marshal.ReadIntPtr(nWindowShares + (nWindowSharesIndex * Marshal.SizeOf(nWindowShares))));
					else{
						GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(Marshal.ReadIntPtr(nWindowShares + (nWindowSharesIndex * Marshal.SizeOf(nWindowShares))));
						csTwindowShares = (LocalWindowShare)objHandle.Target;
					}
				}
				csWindowShares.Add(csTwindowShares);
				nWindowSharesIndex++;
			}

			windowShares = csWindowShares;
			VidyoRoomGetSelectedLocalWindowSharesFreewindowSharesArrayNative(nWindowShares, nWindowSharesSize);
			VidyoRoomVectorVidyoLocalWindowShareDeallocateNative(nListWindowShares);
		}
		public RoomShowThrottle GetShowThrottle(){

			RoomShowThrottle ret = VidyoRoomGetShowThrottleNative(objPtr);

			return ret;
		}
		public uint GetShowThrottleTimerInterval(){

			uint ret = VidyoRoomGetShowThrottleTimerIntervalNative(objPtr);

			return ret;
		}
		public uint GetShowThrottleWindowSizeChangeThreshold(){

			uint ret = VidyoRoomGetShowThrottleWindowSizeChangeThresholdNative(objPtr);

			return ret;
		}
		public Boolean GetStats(ref RoomStats stats){

			Boolean ret = VidyoRoomGetStatsNative(objPtr, (stats != null) ? stats.GetObjectPtr():IntPtr.Zero);

			stats = new RoomStats(stats.GetObjectPtr());
			return ret;
		}
		public RoomType GetType(){

			RoomType ret = VidyoRoomGetTypeNative(objPtr);

			return ret;
		}
		public User GetUser(){

			IntPtr ret = VidyoRoomGetUserNative(objPtr);
			User csRet = null;
			if(ret != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(ret) == IntPtr.Zero)
					csRet = new User(ret);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(ret);
					csRet = (User)objHandle.Target;
				}
			}

			return csRet;
		}
		public void HideStatisticsDialog(){

			VidyoRoomHideStatisticsDialogNative(objPtr);
		}
		public Boolean Invite(String userId, String message, IInvite _iIInvite){
			_mIInvite = _iIInvite;
			_mOnInviteResult = OnInviteResultDelegate;

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoRoomInviteNative(objPtr, nUserId, nMessage, _mOnInviteResult);
			Marshal.FreeHGlobal(nMessage);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public Boolean InviteAll(String message, IInvite _iIInvite){
			_mIInvite = _iIInvite;
			_mOnInviteResult = OnInviteResultDelegate;

			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoRoomInviteAllNative(objPtr, nMessage, _mOnInviteResult);
			Marshal.FreeHGlobal(nMessage);

			return ret;
		}
		public Boolean InviteN(List<String> userIds, String message, IInvite _iIInvite){
			_mIInvite = _iIInvite;
			_mOnInviteResult = OnInviteResultDelegate;

			IntPtr nListUserIds = VidyoRoomVectorLmiStringAllocateNative();

			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			IntPtr nUserIds = Marshal.AllocHGlobal(Marshal.SizeOf<IntPtr>() * userIds.Count);
			int nUserIdsSize = 0;
			foreach (String iter in userIds) {
				Marshal.WriteIntPtr(nUserIds + (nUserIdsSize * Marshal.SizeOf<IntPtr>()), MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(iter ?? string.Empty));
				nUserIdsSize++;
			}
			VidyoRoomInviteNSetuserIdsArrayNative(nListUserIds, nUserIds, nUserIdsSize);
			Marshal.FreeHGlobal(nUserIds);
			Boolean ret = VidyoRoomInviteNNative(objPtr, nListUserIds, nMessage, _mOnInviteResult);
			Marshal.FreeHGlobal(nMessage);
			VidyoRoomVectorLmiStringDeallocateNative(nListUserIds);

			return ret;
		}
		public Boolean Leave(){

			Boolean ret = VidyoRoomLeaveNative(objPtr);

			return ret;
		}
		public Boolean MessageSearch(String searchText, uint index, uint pageSize, IMessageSearch _iIMessageSearch){
			_mIMessageSearch = _iIMessageSearch;
			_mOnMessageSearchResults = OnMessageSearchResultsDelegate;

			IntPtr nSearchText = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(searchText ?? string.Empty);
			Boolean ret = VidyoRoomMessageSearchNative(objPtr, nSearchText, index, pageSize, _mOnMessageSearchResults);
			Marshal.FreeHGlobal(nSearchText);

			return ret;
		}
		public Boolean RegisterMessageEventListener(IRegisterMessageEventListener _iIRegisterMessageEventListener){
			_mIRegisterMessageEventListener = _iIRegisterMessageEventListener;
			_mOnMessageReceived = OnMessageReceivedDelegate;
			_mOnMessageAcknowledged = OnMessageAcknowledgedDelegate;
			_mOnMessageRead = OnMessageReadDelegate;
			_mOnMessageTypingIndication = OnMessageTypingIndicationDelegate;

			Boolean ret = VidyoRoomRegisterMessageEventListenerNative(objPtr, _mOnMessageReceived, _mOnMessageAcknowledged, _mOnMessageRead, _mOnMessageTypingIndication);

			return ret;
		}
		public Boolean RegisterModerationResultEventListener(IRegisterModerationResultEventListener _iIRegisterModerationResultEventListener){
			_mIRegisterModerationResultEventListener = _iIRegisterModerationResultEventListener;
			_mOnModerationResult = OnModerationResultDelegate;

			Boolean ret = VidyoRoomRegisterModerationResultEventListenerNative(objPtr, _mOnModerationResult);

			return ret;
		}
		public Boolean RegisterParticipantEventListener(IRegisterParticipantEventListener _iIRegisterParticipantEventListener){
			_mIRegisterParticipantEventListener = _iIRegisterParticipantEventListener;
			_mOnParticipantJoined = OnParticipantJoinedDelegate;
			_mOnParticipantLeft = OnParticipantLeftDelegate;
			_mOnDynamicParticipantChanged = OnDynamicParticipantChangedDelegate;
			_mOnLoudestParticipantChanged = OnLoudestParticipantChangedDelegate;

			Boolean ret = VidyoRoomRegisterParticipantEventListenerNative(objPtr, _mOnParticipantJoined, _mOnParticipantLeft, _mOnDynamicParticipantChanged, _mOnLoudestParticipantChanged);

			return ret;
		}
		public Boolean RegisterPipEventListener(IRegisterPipEventListener _iIRegisterPipEventListener){
			_mIRegisterPipEventListener = _iIRegisterPipEventListener;
			_mOnPipLocationChanged = OnPipLocationChangedDelegate;

			Boolean ret = VidyoRoomRegisterPipEventListenerNative(objPtr, _mOnPipLocationChanged);

			return ret;
		}
		public Boolean RegisterRecorderInCallEventListener(IRegisterRecorderInCallEventListener _iIRegisterRecorderInCallEventListener){
			_mIRegisterRecorderInCallEventListener = _iIRegisterRecorderInCallEventListener;
			_mRecorderInCall = RecorderInCallDelegate;

			Boolean ret = VidyoRoomRegisterRecorderInCallEventListenerNative(objPtr, _mRecorderInCall);

			return ret;
		}
		public Boolean RegisterResourceManagerEventListener(IRegisterResourceManagerEventListener _iIRegisterResourceManagerEventListener){
			_mIRegisterResourceManagerEventListener = _iIRegisterResourceManagerEventListener;
			_mOnAvailableResourcesChanged = OnAvailableResourcesChangedDelegate;
			_mOnMaxRemoteSourcesChanged = OnMaxRemoteSourcesChangedDelegate;

			Boolean ret = VidyoRoomRegisterResourceManagerEventListenerNative(objPtr, _mOnAvailableResourcesChanged, _mOnMaxRemoteSourcesChanged);

			return ret;
		}
		public Boolean RegisterRoomPropertiesEventListener(IRegisterRoomPropertiesEventListener _iIRegisterRoomPropertiesEventListener){
			_mIRegisterRoomPropertiesEventListener = _iIRegisterRoomPropertiesEventListener;
			_mOnRoomPropertiesChanged = OnRoomPropertiesChangedDelegate;

			Boolean ret = VidyoRoomRegisterRoomPropertiesEventListenerNative(objPtr, _mOnRoomPropertiesChanged);

			return ret;
		}
		public Boolean RegisterSubjectEventListener(IRegisterSubjectEventListener _iIRegisterSubjectEventListener){
			_mIRegisterSubjectEventListener = _iIRegisterSubjectEventListener;
			_mOnSetSubject = OnSetSubjectDelegate;

			Boolean ret = VidyoRoomRegisterSubjectEventListenerNative(objPtr, _mOnSetSubject);

			return ret;
		}
		public Boolean RegisterUnprocessedAudioEventListener(IRegisterUnprocessedAudioEventListener _iIRegisterUnprocessedAudioEventListener){
			_mIRegisterUnprocessedAudioEventListener = _iIRegisterUnprocessedAudioEventListener;
			_mOnUnprocessedAudioSupportChanged = OnUnprocessedAudioSupportChangedDelegate;
			_mOnUnprocessedAudioStarted = OnUnprocessedAudioStartedDelegate;

			Boolean ret = VidyoRoomRegisterUnprocessedAudioEventListenerNative(objPtr, _mOnUnprocessedAudioSupportChanged, _mOnUnprocessedAudioStarted);

			return ret;
		}
		public Boolean RejectIncoming(){

			Boolean ret = VidyoRoomRejectIncomingNative(objPtr);

			return ret;
		}
		public void RemoveLocalCamera(LocalCamera localCamera){

			VidyoRoomRemoveLocalCameraNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalMicrophone(LocalMicrophone localMicrophone){

			VidyoRoomRemoveLocalMicrophoneNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalMonitor(LocalMonitor localMonitor){

			VidyoRoomRemoveLocalMonitorNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalRenderer(LocalRenderer localRenderer){

			VidyoRoomRemoveLocalRendererNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalSpeaker(LocalSpeaker localSpeaker){

			VidyoRoomRemoveLocalSpeakerNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalWindowShare(LocalWindowShare localWindowShare){

			VidyoRoomRemoveLocalWindowShareNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);
		}
		public Boolean RemoveRoleChangeAuthorization(Role role, IRemoveRoleChangeAuthorization _iIRemoveRoleChangeAuthorization, String userContext){
			_mIRemoveRoleChangeAuthorization = _iIRemoveRoleChangeAuthorization;
			_mOnRemoveRoleChangeAuthorizationResult = OnRemoveRoleChangeAuthorizationResultDelegate;

			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRemoveRoleChangeAuthorizationNative(objPtr, role, _mOnRemoveRoleChangeAuthorizationResult, nUserContext);
			Marshal.FreeHGlobal(nUserContext);

			return ret;
		}
		public void RemoveVirtualVideoSource(VirtualVideoSource virtualVideoSource){

			VidyoRoomRemoveVirtualVideoSourceNative(objPtr, (virtualVideoSource != null) ? virtualVideoSource.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveVirtualWindowShare(VirtualWindowShare virtualWindowShare){

			VidyoRoomRemoveVirtualWindowShareNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero);
		}
		public Boolean ReportLocalParticipantOnJoined(Boolean reportLocalParticipant){

			Boolean ret = VidyoRoomReportLocalParticipantOnJoinedNative(objPtr, reportLocalParticipant);

			return ret;
		}
		public Boolean RequestAudioSilenceForAll(String userContext){

			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRequestAudioSilenceForAllNative(objPtr, nUserContext);
			Marshal.FreeHGlobal(nUserContext);

			return ret;
		}
		public Boolean RequestAudioSilenceForParticipant(String userId, String userContext){

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRequestAudioSilenceForParticipantNative(objPtr, nUserId, nUserContext);
			Marshal.FreeHGlobal(nUserContext);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public Boolean RequestRoleChange(Role newRole, RoleAuthorization auth, IRequestRoleChange _iIRequestRoleChange, String userContext){
			_mIRequestRoleChange = _iIRequestRoleChange;
			_mOnRequestRoleChangeResult = OnRequestRoleChangeResultDelegate;

			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRequestRoleChangeNative(objPtr, newRole, (auth != null) ? auth.GetObjectPtr():IntPtr.Zero, _mOnRequestRoleChangeResult, nUserContext);
			Marshal.FreeHGlobal(nUserContext);

			return ret;
		}
		public Boolean RequestVideoSilenceForAll(String userContext){

			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRequestVideoSilenceForAllNative(objPtr, nUserContext);
			Marshal.FreeHGlobal(nUserContext);

			return ret;
		}
		public Boolean RequestVideoSilenceForParticipant(String userId, String userContext){

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRequestVideoSilenceForParticipantNative(objPtr, nUserId, nUserContext);
			Marshal.FreeHGlobal(nUserContext);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public void ResizeStatisticsDialog(int width, int height){

			VidyoRoomResizeStatisticsDialogNative(objPtr, width, height);
		}
		public Boolean RevokeAudioForAll(Boolean revoke, String userContext){

			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRevokeAudioForAllNative(objPtr, revoke, nUserContext);
			Marshal.FreeHGlobal(nUserContext);

			return ret;
		}
		public Boolean RevokeAudioForParticipant(String userId, Boolean revoke, String userContext){

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRevokeAudioForParticipantNative(objPtr, nUserId, revoke, nUserContext);
			Marshal.FreeHGlobal(nUserContext);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public Boolean RevokeVideoForAll(Boolean revoke, String userContext){

			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRevokeVideoForAllNative(objPtr, revoke, nUserContext);
			Marshal.FreeHGlobal(nUserContext);

			return ret;
		}
		public Boolean RevokeVideoForParticipant(String userId, Boolean revoke, String userContext){

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomRevokeVideoForParticipantNative(objPtr, nUserId, revoke, nUserContext);
			Marshal.FreeHGlobal(nUserContext);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public Boolean SendMessage(String message){

			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoRoomSendMessageNative(objPtr, nMessage);
			Marshal.FreeHGlobal(nMessage);

			return ret;
		}
		public Boolean SendMessageAcknowledged(long messageId){

			Boolean ret = VidyoRoomSendMessageAcknowledgedNative(objPtr, messageId);

			return ret;
		}
		public Boolean SendMessageTypingIndication(ChatMessage.ChatMessageTypingIndication typingIndication){

			Boolean ret = VidyoRoomSendMessageTypingIndicationNative(objPtr, typingIndication);

			return ret;
		}
		public Boolean SetDynamicGenerationPosition(uint generation, int x, int y, uint width, uint height, ulong frameInterval){

			Boolean ret = VidyoRoomSetDynamicGenerationPositionNative(objPtr, generation, x, y, width, height, frameInterval);

			return ret;
		}
		public Boolean SetDynamicLocalRenderer(LocalRenderer renderer){

			Boolean ret = VidyoRoomSetDynamicLocalRendererNative(objPtr, (renderer != null) ? renderer.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public void SetFavorite(Boolean isFavorite, ISetFavorite _iISetFavorite){
			_mISetFavorite = _iISetFavorite;
			_mOnSetFavoriteResult = OnSetFavoriteResultDelegate;

			VidyoRoomSetFavoriteNative(objPtr, isFavorite, _mOnSetFavoriteResult);
		}
		public Boolean SetMaxAudioSources(uint count){

			Boolean ret = VidyoRoomSetMaxAudioSourcesNative(objPtr, count);

			return ret;
		}
		public void SetMaxReceiveBitRate(uint bitRate){

			VidyoRoomSetMaxReceiveBitRateNative(objPtr, bitRate);
		}
		public void SetMaxSendBitRate(uint bitRate){

			VidyoRoomSetMaxSendBitRateNative(objPtr, bitRate);
		}
		public Boolean SetMaxVideoSources(uint count){

			Boolean ret = VidyoRoomSetMaxVideoSourcesNative(objPtr, count);

			return ret;
		}
		public Boolean SetRoleChangeAuthorization(Role role, RoleAuthorization auth, ISetRoleChangeAuthorization _iISetRoleChangeAuthorization, String userContext){
			_mISetRoleChangeAuthorization = _iISetRoleChangeAuthorization;
			_mOnSetRoleChangeAuthorizationResult = OnSetRoleChangeAuthorizationResultDelegate;

			IntPtr nUserContext = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userContext ?? string.Empty);
			Boolean ret = VidyoRoomSetRoleChangeAuthorizationNative(objPtr, role, (auth != null) ? auth.GetObjectPtr():IntPtr.Zero, _mOnSetRoleChangeAuthorizationResult, nUserContext);
			Marshal.FreeHGlobal(nUserContext);

			return ret;
		}
		public Boolean SetRoomProperties(RoomProperties roomProperties, ISetRoomProperties _iISetRoomProperties){
			_mISetRoomProperties = _iISetRoomProperties;
			_mOnSetRoomPropertiesResult = OnSetRoomPropertiesResultDelegate;

			Boolean ret = VidyoRoomSetRoomPropertiesNative(objPtr, (roomProperties != null) ? roomProperties.GetObjectPtr():IntPtr.Zero, _mOnSetRoomPropertiesResult);

			return ret;
		}
		public void SetShowThrottle(RoomShowThrottle t){

			VidyoRoomSetShowThrottleNative(objPtr, t);
		}
		public void SetShowThrottleTimerInterval(uint seconds){

			VidyoRoomSetShowThrottleTimerIntervalNative(objPtr, seconds);
		}
		public void SetShowThrottleWindowSizeChangeThreshold(uint percentage){

			VidyoRoomSetShowThrottleWindowSizeChangeThresholdNative(objPtr, percentage);
		}
		public Boolean SetSubject(String subject){

			IntPtr nSubject = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(subject ?? string.Empty);
			Boolean ret = VidyoRoomSetSubjectNative(objPtr, nSubject);
			Marshal.FreeHGlobal(nSubject);

			return ret;
		}
		public void ShowStatisticsDialog(){

			VidyoRoomShowStatisticsDialogNative(objPtr);
		}
		public Boolean UnRegisterModerationResultEventListener(){

			Boolean ret = VidyoRoomUnRegisterModerationResultEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterMessageEventListener(){

			Boolean ret = VidyoRoomUnregisterMessageEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterParticipantEventListener(){

			Boolean ret = VidyoRoomUnregisterParticipantEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterPipEventListener(){

			Boolean ret = VidyoRoomUnregisterPipEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRecorderInCallEventListener(){

			Boolean ret = VidyoRoomUnregisterRecorderInCallEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterResourceManagerEventListener(){

			Boolean ret = VidyoRoomUnregisterResourceManagerEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRoomPropertiesEventListener(){

			Boolean ret = VidyoRoomUnregisterRoomPropertiesEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterSubjectEventListener(){

			Boolean ret = VidyoRoomUnregisterSubjectEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterUnprocessedAudioEventListener(){

			Boolean ret = VidyoRoomUnregisterUnprocessedAudioEventListenerNative(objPtr);

			return ret;
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnAvailableResourcesChanged))]
#endif
		private static void OnAvailableResourcesChangedDelegate(IntPtr room, uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterResourceManagerEventListener != null)
				csRoom._mIRegisterResourceManagerEventListener.OnAvailableResourcesChanged(cpuEncode, cpuDecode, bandwidthSend, bandwidthReceive);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnDeleteResult))]
#endif
		private static void OnDeleteResultDelegate(IntPtr room, RoomDeleteResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIDelete != null)
				csRoom._mIDelete.OnDeleteResult(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnDynamicParticipantChanged))]
#endif
		private static void OnDynamicParticipantChangedDelegate(IntPtr room, IntPtr selectedParticipants){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			List<Participant> csSelectedParticipants = new List<Participant>();
			int nSelectedParticipantsSize = 0;
			IntPtr nSelectedParticipants = VidyoRoomOnDynamicParticipantChangedGetselectedParticipantsArrayNative(selectedParticipants, ref nSelectedParticipantsSize);
			int nSelectedParticipantsIndex = 0;
			while (nSelectedParticipantsIndex < nSelectedParticipantsSize) {
				Participant csTselectedParticipants = null;
				if(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants))) != IntPtr.Zero){
					if(Participant.VidyoParticipantGetUserDataNative(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants)))) == IntPtr.Zero)
						csTselectedParticipants = new Participant(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants))));
					else{
						GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants))));
						csTselectedParticipants = (Participant)objHandle.Target;
					}
				}
				csSelectedParticipants.Add(csTselectedParticipants);
				nSelectedParticipantsIndex++;
			}

			if(csRoom._mIRegisterParticipantEventListener != null)
				csRoom._mIRegisterParticipantEventListener.OnDynamicParticipantChanged(csSelectedParticipants);
			VidyoRoomOnDynamicParticipantChangedFreeselectedParticipantsArrayNative(nSelectedParticipants, nSelectedParticipantsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnEntered))]
#endif
		private static void OnEnteredDelegate(IntPtr room, RoomEnterResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIEnter != null)
				csRoom._mIEnter.OnEntered(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnExited))]
#endif
		private static void OnExitedDelegate(IntPtr room, RoomExitReason reason){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIEnter != null)
				csRoom._mIEnter.OnExited(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnGetHistoryResults))]
#endif
		private static void OnGetHistoryResultsDelegate(IntPtr room, IntPtr records, long historySize, RoomSearchResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			List<ChatMessage> csRecords = new List<ChatMessage>();
			int nRecordsSize = 0;
			IntPtr nRecords = VidyoRoomOnGetHistoryResultsGetrecordsArrayNative(records, ref nRecordsSize);
			int nRecordsIndex = 0;
			while (nRecordsIndex < nRecordsSize) {
				ChatMessage csTrecords = new ChatMessage(Marshal.ReadIntPtr(nRecords + (nRecordsIndex * Marshal.SizeOf(nRecords))));
				csRecords.Add(csTrecords);
				nRecordsIndex++;
			}

			if(csRoom._mIGetHistory != null)
				csRoom._mIGetHistory.OnGetHistoryResults(csRecords, historySize, result);
			VidyoRoomOnGetHistoryResultsFreerecordsArrayNative(nRecords, nRecordsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnGetRoomPropertiesResult))]
#endif
		private static void OnGetRoomPropertiesResultDelegate(IntPtr room, RoomGetPropertiesResult result, IntPtr roomProperties){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			RoomProperties csRoomProperties = new RoomProperties(roomProperties);
			if(csRoom._mIGetRoomProperties != null)
				csRoom._mIGetRoomProperties.OnGetRoomPropertiesResult(result, csRoomProperties);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnIncomingEntered))]
#endif
		private static void OnIncomingEnteredDelegate(IntPtr room, RoomEnterResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIAcceptIncoming != null)
				csRoom._mIAcceptIncoming.OnIncomingEntered(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnIncomingExited))]
#endif
		private static void OnIncomingExitedDelegate(IntPtr room, RoomExitReason reason){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIAcceptIncoming != null)
				csRoom._mIAcceptIncoming.OnIncomingExited(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnInviteResult))]
#endif
		private static void OnInviteResultDelegate(IntPtr room, IntPtr inviteeId, RoomInviteResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			IntPtr n_inviteeId = VidyoRoomOnInviteResultGetinviteeIdCStr(inviteeId);

			if(csRoom._mIInvite != null)
				csRoom._mIInvite.OnInviteResult((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_inviteeId), result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLoudestParticipantChanged))]
#endif
		private static void OnLoudestParticipantChangedDelegate(IntPtr room, IntPtr participant, Boolean isAudioOnly, Boolean isStatic){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterParticipantEventListener != null)
				csRoom._mIRegisterParticipantEventListener.OnLoudestParticipantChanged(csParticipant, isAudioOnly, isStatic);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMaxRemoteSourcesChanged))]
#endif
		private static void OnMaxRemoteSourcesChangedDelegate(IntPtr room, uint maxRemoteSources){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterResourceManagerEventListener != null)
				csRoom._mIRegisterResourceManagerEventListener.OnMaxRemoteSourcesChanged(maxRemoteSources);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaDisabled))]
#endif
		private static void OnMediaDisabledDelegate(IntPtr room, RoomMediaDisableReason reason){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIEnableMedia != null)
				csRoom._mIEnableMedia.OnMediaDisabled(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaEnabled))]
#endif
		private static void OnMediaEnabledDelegate(IntPtr room){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIEnableMedia != null)
				csRoom._mIEnableMedia.OnMediaEnabled();
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaFailed))]
#endif
		private static void OnMediaFailedDelegate(IntPtr room, RoomMediaFailReason reason){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIEnableMedia != null)
				csRoom._mIEnableMedia.OnMediaFailed(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaRouteAcquireFailed))]
#endif
		private static void OnMediaRouteAcquireFailedDelegate(IntPtr room, RoomMediaFailReason reason){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIAcquireMediaRoute != null)
				csRoom._mIAcquireMediaRoute.OnMediaRouteAcquireFailed(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaRouteAcquired))]
#endif
		private static void OnMediaRouteAcquiredDelegate(IntPtr room){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIAcquireMediaRoute != null)
				csRoom._mIAcquireMediaRoute.OnMediaRouteAcquired();
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageAcknowledged))]
#endif
		private static void OnMessageAcknowledgedDelegate(IntPtr room, IntPtr chatMessage){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			ChatMessage csChatMessage = new ChatMessage(chatMessage);
			if(csRoom._mIRegisterMessageEventListener != null)
				csRoom._mIRegisterMessageEventListener.OnMessageAcknowledged(csChatMessage);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageRead))]
#endif
		private static void OnMessageReadDelegate(IntPtr room, IntPtr participant, long messageId){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterMessageEventListener != null)
				csRoom._mIRegisterMessageEventListener.OnMessageRead(csParticipant, messageId);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageReceived))]
#endif
		private static void OnMessageReceivedDelegate(IntPtr room, IntPtr participant, IntPtr chatMessage){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			ChatMessage csChatMessage = new ChatMessage(chatMessage);
			if(csRoom._mIRegisterMessageEventListener != null)
				csRoom._mIRegisterMessageEventListener.OnMessageReceived(csParticipant, csChatMessage);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageSearchResults))]
#endif
		private static void OnMessageSearchResultsDelegate(IntPtr room, IntPtr searchText, IntPtr records, RoomSearchResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			List<ChatMessage> csRecords = new List<ChatMessage>();
			int nRecordsSize = 0;
			IntPtr nRecords = VidyoRoomOnMessageSearchResultsGetrecordsArrayNative(records, ref nRecordsSize);
			int nRecordsIndex = 0;
			while (nRecordsIndex < nRecordsSize) {
				ChatMessage csTrecords = new ChatMessage(Marshal.ReadIntPtr(nRecords + (nRecordsIndex * Marshal.SizeOf(nRecords))));
				csRecords.Add(csTrecords);
				nRecordsIndex++;
			}

			if(csRoom._mIMessageSearch != null)
				csRoom._mIMessageSearch.OnMessageSearchResults((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(searchText), csRecords, result);
			VidyoRoomOnMessageSearchResultsFreerecordsArrayNative(nRecords, nRecordsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageTypingIndication))]
#endif
		private static void OnMessageTypingIndicationDelegate(IntPtr room, IntPtr participant, ChatMessage.ChatMessageTypingIndication typingIndication){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterMessageEventListener != null)
				csRoom._mIRegisterMessageEventListener.OnMessageTypingIndication(csParticipant, typingIndication);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnModerationResult))]
#endif
		private static void OnModerationResultDelegate(IntPtr room, RoomModerationResult result, IntPtr userContext){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			IntPtr n_userContext = VidyoRoomOnModerationResultGetuserContextCStr(userContext);

			if(csRoom._mIRegisterModerationResultEventListener != null)
				csRoom._mIRegisterModerationResultEventListener.OnModerationResult(result, (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_userContext));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnParticipantJoined))]
#endif
		private static void OnParticipantJoinedDelegate(IntPtr room, IntPtr participant){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterParticipantEventListener != null)
				csRoom._mIRegisterParticipantEventListener.OnParticipantJoined(csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnParticipantLeft))]
#endif
		private static void OnParticipantLeftDelegate(IntPtr room, IntPtr participant){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterParticipantEventListener != null)
				csRoom._mIRegisterParticipantEventListener.OnParticipantLeft(csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnPipLocationChanged))]
#endif
		private static void OnPipLocationChangedDelegate(IntPtr room, int x, int y, uint width, uint height, Boolean isExpanded){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterPipEventListener != null)
				csRoom._mIRegisterPipEventListener.OnPipLocationChanged(x, y, width, height, isExpanded);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoveRoleChangeAuthorizationResult))]
#endif
		private static void OnRemoveRoleChangeAuthorizationResultDelegate(IntPtr room, RoomRemoveRoleChangeAuthorizationResult result, IntPtr userContext){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			IntPtr n_userContext = VidyoRoomOnRemoveRoleChangeAuthorizationResultGetuserContextCStr(userContext);

			if(csRoom._mIRemoveRoleChangeAuthorization != null)
				csRoom._mIRemoveRoleChangeAuthorization.OnRemoveRoleChangeAuthorizationResult(result, (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_userContext));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRequestRoleChangeResult))]
#endif
		private static void OnRequestRoleChangeResultDelegate(IntPtr room, RoomRequestRoleChangeResult result, IntPtr userContext){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			IntPtr n_userContext = VidyoRoomOnRequestRoleChangeResultGetuserContextCStr(userContext);

			if(csRoom._mIRequestRoleChange != null)
				csRoom._mIRequestRoleChange.OnRequestRoleChangeResult(result, (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_userContext));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRoomPropertiesChanged))]
#endif
		private static void OnRoomPropertiesChangedDelegate(IntPtr room, IntPtr roomProperties){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			RoomProperties csRoomProperties = new RoomProperties(roomProperties);
			if(csRoom._mIRegisterRoomPropertiesEventListener != null)
				csRoom._mIRegisterRoomPropertiesEventListener.OnRoomPropertiesChanged(csRoomProperties);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSetFavoriteResult))]
#endif
		private static void OnSetFavoriteResultDelegate(IntPtr room, Boolean isFavorite, RoomSetFavoriteResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mISetFavorite != null)
				csRoom._mISetFavorite.OnSetFavoriteResult(isFavorite, result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSetRoleChangeAuthorizationResult))]
#endif
		private static void OnSetRoleChangeAuthorizationResultDelegate(IntPtr room, RoomSetRoleChangeAuthorizationResult result, IntPtr userContext){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			IntPtr n_userContext = VidyoRoomOnSetRoleChangeAuthorizationResultGetuserContextCStr(userContext);

			if(csRoom._mISetRoleChangeAuthorization != null)
				csRoom._mISetRoleChangeAuthorization.OnSetRoleChangeAuthorizationResult(result, (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_userContext));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSetRoomPropertiesResult))]
#endif
		private static void OnSetRoomPropertiesResultDelegate(IntPtr room, RoomSetPropertiesResult result){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mISetRoomProperties != null)
				csRoom._mISetRoomProperties.OnSetRoomPropertiesResult(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSetSubject))]
#endif
		private static void OnSetSubjectDelegate(IntPtr room, IntPtr subject){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterSubjectEventListener != null)
				csRoom._mIRegisterSubjectEventListener.OnSetSubject((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(subject));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnUnprocessedAudioStarted))]
#endif
		private static void OnUnprocessedAudioStartedDelegate(IntPtr room, Boolean started){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterUnprocessedAudioEventListener != null)
				csRoom._mIRegisterUnprocessedAudioEventListener.OnUnprocessedAudioStarted(started);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnUnprocessedAudioSupportChanged))]
#endif
		private static void OnUnprocessedAudioSupportChangedDelegate(IntPtr room, Boolean supported){
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(csRoom._mIRegisterUnprocessedAudioEventListener != null)
				csRoom._mIRegisterUnprocessedAudioEventListener.OnUnprocessedAudioSupportChanged(supported);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(RecorderInCall))]
#endif
		private static void RecorderInCallDelegate(IntPtr r, Boolean recorderInCall){
			Room csR = null;
			if(r != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(r) == IntPtr.Zero)
					csR = new Room(r);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(r);
					csR = (Room)objHandle.Target;
				}
			}
			if(csR._mIRegisterRecorderInCallEventListener != null)
				csR._mIRegisterRecorderInCallEventListener.RecorderInCall(recorderInCall);
		}
	};
}
