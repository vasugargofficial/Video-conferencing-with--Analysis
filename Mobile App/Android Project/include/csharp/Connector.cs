// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class Connector: IDisposable {
		private bool disposed = false; 
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoConnector reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAddMessageClassNative(IntPtr c, IntPtr messageClass);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAssignViewToCompositeRendererNative(IntPtr c, ref IntPtr viewId, [MarshalAs(UnmanagedType.I4)]ConnectorViewStyle viewStyle, uint remoteParticipants);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAssignViewToLocalCameraNative(IntPtr c, ref IntPtr viewId, IntPtr localCamera, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAssignViewToLocalMonitorNative(IntPtr c, ref IntPtr viewId, IntPtr localMonitor, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAssignViewToLocalWindowShareNative(IntPtr c, ref IntPtr viewId, IntPtr localWindowShare, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAssignViewToRemoteCameraNative(IntPtr c, ref IntPtr viewId, IntPtr remoteCamera, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAssignViewToRemoteWindowShareNative(IntPtr c, ref IntPtr viewId, IntPtr remoteWindowShare, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorAssignViewToVirtualVideoSourceNative(IntPtr c, ref IntPtr viewId, IntPtr virtualVideoSource, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorConnectNative(IntPtr c, IntPtr host, IntPtr token, IntPtr displayName, IntPtr resourceId, OnSuccess onSuccess, OnFailure onFailure, OnDisconnected onDisconnected);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorConnectToRoomAsGuestNative(IntPtr c, IntPtr host, IntPtr displayName, IntPtr roomKey, IntPtr roomPin, OnSuccess onSuccess, OnFailure onFailure, OnDisconnected onDisconnected);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorConnectToRoomWithIdNative(IntPtr c, IntPtr host, IntPtr userName, IntPtr password, IntPtr roomId, IntPtr roomPin, OnSuccess onSuccess, OnFailure onFailure, OnDisconnected onDisconnected);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorConnectToRoomWithKeyNative(IntPtr c, IntPtr host, IntPtr userName, IntPtr password, IntPtr roomKey, IntPtr roomPin, OnSuccess onSuccess, OnFailure onFailure, OnDisconnected onDisconnected);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorConnectToRoomWithTokenAndIdNative(IntPtr c, IntPtr host, IntPtr userName, IntPtr token, IntPtr roomId, IntPtr roomPin, OnSuccess onSuccess, OnFailure onFailure, OnDisconnected onDisconnected);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorConnectToRoomWithTokenAndKeyNative(IntPtr c, IntPtr host, IntPtr userName, IntPtr token, IntPtr roomKey, IntPtr roomPin, OnSuccess onSuccess, OnFailure onFailure, OnDisconnected onDisconnected);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorConstructNative(ref IntPtr viewId, [MarshalAs(UnmanagedType.I4)]ConnectorViewStyle viewStyle, uint remoteParticipants, IntPtr logFileFilter, IntPtr logFileName, ulong userData);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorCreateVirtualVideoSourceNative(IntPtr c, [MarshalAs(UnmanagedType.I4)]VirtualVideoSource.VirtualVideoSourceType type, IntPtr id, IntPtr name);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorCycleCameraNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorCycleMicrophoneNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorCycleSpeakerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorDestroyVirtualVideoSourceNative(IntPtr c, IntPtr virtualVideoSource);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorDestructNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorDisableNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorDisableDebugNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorDisconnectNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorEnableDebugNative(IntPtr c, uint port, IntPtr logFilter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern ConnectorTradeOffProfile VidyoConnectorGetCpuTradeOffProfileNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern uint VidyoConnectorGetMaxReceiveBitRateNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern uint VidyoConnectorGetMaxSendBitRateNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorGetRendererOptionsForViewIdNative(IntPtr c, ref IntPtr viewId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern ConnectorState VidyoConnectorGetStateNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorGetStatsJsonNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorGetVersionNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorGetVersionWithoutBuildNumberNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorHideViewNative(IntPtr c, ref IntPtr viewId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalCameraEventListenerNative(IntPtr c, OnLocalCameraAdded onAdded, OnLocalCameraRemoved onRemoved, OnLocalCameraSelected onSelected, OnLocalCameraStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalCameraFrameListenerNative(IntPtr c, OnLocalCameraFrame onFrame, IntPtr localCamera, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalMicrophoneEnergyListenerNative(IntPtr c, OnLocalMicrophoneEnergy onEnergy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalMicrophoneEventListenerNative(IntPtr c, OnLocalMicrophoneAdded onAdded, OnLocalMicrophoneRemoved onRemoved, OnLocalMicrophoneSelected onSelected, OnLocalMicrophoneStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalMicrophoneFrameListenerNative(IntPtr c, OnLocalMicrophoneFrame onFrame, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalMonitorEventListenerNative(IntPtr c, OnLocalMonitorAdded onAdded, OnLocalMonitorRemoved onRemoved, OnLocalMonitorSelected onSelected, OnLocalMonitorStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalMonitorFrameListenerNative(IntPtr c, OnLocalMonitorFrame onFrame, IntPtr localMonitor, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalSpeakerEventListenerNative(IntPtr c, OnLocalSpeakerAdded onAdded, OnLocalSpeakerRemoved onRemoved, OnLocalSpeakerSelected onSelected, OnLocalSpeakerStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalWindowShareEventListenerNative(IntPtr c, OnLocalWindowShareAdded onAdded, OnLocalWindowShareRemoved onRemoved, OnLocalWindowShareSelected onSelected, OnLocalWindowShareStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLocalWindowShareFrameListenerNative(IntPtr c, OnLocalWindowShareFrame onFrame, IntPtr localWindowShare, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterLogEventListenerNative(IntPtr c, OnLog onLog, IntPtr filter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterMessageEventListenerNative(IntPtr c, OnChatMessageReceived onChatMessageReceived);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterNetworkInterfaceEventListenerNative(IntPtr c, OnNetworkInterfaceAdded onAdded, OnNetworkInterfaceRemoved onRemoved, OnNetworkInterfaceSelected onSelected, OnNetworkInterfaceStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterParticipantEventListenerNative(IntPtr c, OnParticipantJoined onJoined, OnParticipantLeft onLeft, OnDynamicParticipantChanged onDynamicChanged, OnLoudestParticipantChanged onLoudestChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRecorderInCallEventListenerNative(IntPtr c, RecorderInCall onRecorderInCallChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteCameraEventListenerNative(IntPtr c, OnRemoteCameraAdded onAdded, OnRemoteCameraRemoved onRemoved, OnRemoteCameraStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteCameraFrameListenerNative(IntPtr c, OnRemoteCameraFrame onFrame, IntPtr remoteCamera, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteMicrophoneEnergyListenerNative(IntPtr c, OnRemoteMicrophoneEnergy onEnergy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteMicrophoneEventListenerNative(IntPtr c, OnRemoteMicrophoneAdded onAdded, OnRemoteMicrophoneRemoved onRemoved, OnRemoteMicrophoneStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteMicrophoneFrameListenerNative(IntPtr c, OnRemoteMicrophoneFrame onFrame, IntPtr remoteMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteRendererEventListenerNative(IntPtr c, OnRemoteRendererAdded onAdded, OnRemoteRendererRemoved onRemoved, OnRemoteRendererStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteSpeakerEventListenerNative(IntPtr c, OnRemoteSpeakerAdded onAdded, OnRemoteSpeakerRemoved onRemoved, OnRemoteSpeakerStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteWindowShareEventListenerNative(IntPtr c, OnRemoteWindowShareAdded onAdded, OnRemoteWindowShareRemoved onRemoved, OnRemoteWindowShareStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterRemoteWindowShareFrameListenerNative(IntPtr c, OnRemoteWindowShareFrame onFrame, IntPtr remoteWindowShare, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterResourceManagerEventListenerNative(IntPtr c, OnAvailableResourcesChanged onAvailableResourcesChanged, OnMaxRemoteSourcesChanged onMaxRemoteSourcesChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterVirtualVideoSourceEventListenerNative(IntPtr c, OnVirtualVideoSourceAdded onAdded, OnVirtualVideoSourceRemoved onRemoved, OnVirtualVideoSourceStateUpdated onStateUpdated, OnVirtualVideoSourceExternalMediaBufferReleased onExternalMediaBufferReleased);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRegisterWebProxyEventListenerNative(IntPtr c, OnWebProxyCredentialsRequest onWebProxyCredentialsRequest);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorReportLocalParticipantOnJoinedNative(IntPtr c, Boolean reportLocalParticipant);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRequestToResumeVideoNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorRequestToSpeakNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectAudioContentShareNative(IntPtr c, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectDefaultCameraNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectDefaultMicrophoneNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectDefaultNetworkInterfaceForMediaNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectDefaultNetworkInterfaceForSignalingNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectDefaultSpeakerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectLocalCameraNative(IntPtr c, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectLocalMicrophoneNative(IntPtr c, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectLocalMonitorNative(IntPtr c, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectLocalSpeakerNative(IntPtr c, IntPtr localSpeaker);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectLocalWindowShareNative(IntPtr c, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectNetworkInterfaceForMediaNative(IntPtr c, IntPtr networkInterface);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectNetworkInterfaceForSignalingNative(IntPtr c, IntPtr networkInterface);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectVideoContentShareNative(IntPtr c, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectVirtualCameraNative(IntPtr c, IntPtr virtualCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectVirtualSourceWindowShareNative(IntPtr c, IntPtr virtualWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSelectVirtualWindowShareNative(IntPtr c, IntPtr virtualWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSendChatMessageNative(IntPtr c, IntPtr message);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetAdvancedOptionsNative(IntPtr c, IntPtr options);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetCameraNudgeConfigurationNative(IntPtr c, IntPtr cameraNudgeConfig);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetCameraPrivacyNative(IntPtr c, Boolean privacy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorSetCertificateAuthorityFileNative(IntPtr c, IntPtr certificateAuthorityFile);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorSetCertificateAuthorityListNative(IntPtr c, IntPtr certificateAuthorityList);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetCpuTradeOffProfileNative(IntPtr c, [MarshalAs(UnmanagedType.I4)]ConnectorTradeOffProfile profile);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetFontFileNameNative(IntPtr c, IntPtr fontFileName);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetLocationNative(IntPtr c, double latitude, double longitude);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorSetMaxBitRateNative(IntPtr c, uint bitRate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorSetMaxReceiveBitRateNative(IntPtr c, uint bitRate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorSetMaxSendBitRateNative(IntPtr c, uint bitRate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetMicrophonePrivacyNative(IntPtr c, Boolean privacy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetModeNative(IntPtr c, [MarshalAs(UnmanagedType.I4)]ConnectorMode mode);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetPoolNative(IntPtr c, IntPtr name);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetRendererOptionsForViewIdNative(IntPtr c, ref IntPtr viewId, IntPtr options);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetSpeakerPrivacyNative(IntPtr c, Boolean privacy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetTCPTransportNative(IntPtr c, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetTURNAddressCredentialsNative(IntPtr c, IntPtr turnAddress, uint port, IntPtr username, IntPtr password, [MarshalAs(UnmanagedType.I4)]ConnectorBaseTransportType baseTransport);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetTURNServerCertificateRequiredNative(IntPtr c, Boolean required);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetUDPTransportNative(IntPtr c, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetViewAnimationSpeedNative(IntPtr c, ref IntPtr viewId, uint speedPercentage);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetViewBackgroundColorNative(IntPtr c, ref IntPtr viewId, byte red, byte green, byte blue);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoConnectorSetWebProxyAddressCredentialsNative(IntPtr c, IntPtr proxyAddress, IntPtr username, IntPtr password);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetWebProxyTransportNative(IntPtr c, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorSetWebProxyTransportAddressNative(IntPtr c, IntPtr name, uint port);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorShowAudioMetersNative(IntPtr c, ref IntPtr viewId, Boolean showMeters);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorShowPreviewNative(IntPtr c, Boolean preview);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorShowViewAtNative(IntPtr c, ref IntPtr viewId, int x, int y, uint width, uint height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorShowViewAtPointsNative(IntPtr c, ref IntPtr viewId, int x, int y, uint width, uint height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorShowViewLabelNative(IntPtr c, ref IntPtr viewId, Boolean showLabel);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorShowWindowSharePreviewNative(IntPtr c, Boolean preview);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalCameraEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalCameraFrameListenerNative(IntPtr c, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalMicrophoneEnergyListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalMicrophoneEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalMicrophoneFrameListenerNative(IntPtr c, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalMonitorEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalMonitorFrameListenerNative(IntPtr c, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalSpeakerEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalWindowShareEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLocalWindowShareFrameListenerNative(IntPtr c, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterLogEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterMessageEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterNetworkInterfaceEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterParticipantEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRecorderInCallEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteCameraEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteCameraFrameListenerNative(IntPtr c, IntPtr remoteCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteMicrophoneEnergyListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteMicrophoneEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteMicrophoneFrameListenerNative(IntPtr c, IntPtr remoteMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteRendererEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteSpeakerEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteWindowShareEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterRemoteWindowShareFrameListenerNative(IntPtr c, IntPtr remoteWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterResourceManagerEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterVirtualVideoSourceEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoConnectorUnregisterWebProxyEventListenerNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoConnectorGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoConnectorSetUserDataNative(IntPtr obj, IntPtr userData);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnAvailableResourcesChanged(IntPtr c, uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive);
		private OnAvailableResourcesChanged _mOnAvailableResourcesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnChatMessageReceived(IntPtr c, IntPtr participant, IntPtr chatMessage);
		private OnChatMessageReceived _mOnChatMessageReceived;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnDisconnected(IntPtr c, ConnectorDisconnectReason reason);
		private OnDisconnected _mOnDisconnected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnDynamicParticipantChanged(IntPtr c, IntPtr participants);
		private OnDynamicParticipantChanged _mOnDynamicParticipantChanged;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorOnDynamicParticipantChangedGetparticipantsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorOnDynamicParticipantChangedFreeparticipantsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnFailure(IntPtr c, ConnectorFailReason reason);
		private OnFailure _mOnFailure;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraAdded(IntPtr c, IntPtr localCamera);
		private OnLocalCameraAdded _mOnLocalCameraAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraFrame(IntPtr c, IntPtr localCamera, IntPtr videoFrame);
		private OnLocalCameraFrame _mOnLocalCameraFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraRemoved(IntPtr c, IntPtr localCamera);
		private OnLocalCameraRemoved _mOnLocalCameraRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraSelected(IntPtr c, IntPtr localCamera);
		private OnLocalCameraSelected _mOnLocalCameraSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraStateUpdated(IntPtr c, IntPtr localCamera, Device.DeviceState state);
		private OnLocalCameraStateUpdated _mOnLocalCameraStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneAdded(IntPtr c, IntPtr localMicrophone);
		private OnLocalMicrophoneAdded _mOnLocalMicrophoneAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneEnergy(IntPtr c, IntPtr localMicrophone, int audioEnergy);
		private OnLocalMicrophoneEnergy _mOnLocalMicrophoneEnergy;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneFrame(IntPtr c, IntPtr localMicrophone, IntPtr audioFrame);
		private OnLocalMicrophoneFrame _mOnLocalMicrophoneFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneRemoved(IntPtr c, IntPtr localMicrophone);
		private OnLocalMicrophoneRemoved _mOnLocalMicrophoneRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneSelected(IntPtr c, IntPtr localMicrophone);
		private OnLocalMicrophoneSelected _mOnLocalMicrophoneSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneStateUpdated(IntPtr c, IntPtr localMicrophone, Device.DeviceState state);
		private OnLocalMicrophoneStateUpdated _mOnLocalMicrophoneStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorAdded(IntPtr c, IntPtr localMonitor);
		private OnLocalMonitorAdded _mOnLocalMonitorAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorFrame(IntPtr c, IntPtr localMonitor, IntPtr videoFrame);
		private OnLocalMonitorFrame _mOnLocalMonitorFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorRemoved(IntPtr c, IntPtr localMonitor);
		private OnLocalMonitorRemoved _mOnLocalMonitorRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorSelected(IntPtr c, IntPtr localMonitor);
		private OnLocalMonitorSelected _mOnLocalMonitorSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorStateUpdated(IntPtr c, IntPtr localMonitor, Device.DeviceState state);
		private OnLocalMonitorStateUpdated _mOnLocalMonitorStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerAdded(IntPtr c, IntPtr localSpeaker);
		private OnLocalSpeakerAdded _mOnLocalSpeakerAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerRemoved(IntPtr c, IntPtr localSpeaker);
		private OnLocalSpeakerRemoved _mOnLocalSpeakerRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerSelected(IntPtr c, IntPtr localSpeaker);
		private OnLocalSpeakerSelected _mOnLocalSpeakerSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerStateUpdated(IntPtr c, IntPtr localSpeaker, Device.DeviceState state);
		private OnLocalSpeakerStateUpdated _mOnLocalSpeakerStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareAdded(IntPtr c, IntPtr localWindowShare);
		private OnLocalWindowShareAdded _mOnLocalWindowShareAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareFrame(IntPtr c, IntPtr localWindowShare, IntPtr videoFrame);
		private OnLocalWindowShareFrame _mOnLocalWindowShareFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareRemoved(IntPtr c, IntPtr localWindowShare);
		private OnLocalWindowShareRemoved _mOnLocalWindowShareRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareSelected(IntPtr c, IntPtr localWindowShare);
		private OnLocalWindowShareSelected _mOnLocalWindowShareSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareStateUpdated(IntPtr c, IntPtr localWindowShare, Device.DeviceState state);
		private OnLocalWindowShareStateUpdated _mOnLocalWindowShareStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLog(IntPtr c, IntPtr logRecord);
		private OnLog _mOnLog;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLoudestParticipantChanged(IntPtr c, IntPtr participant, Boolean audioOnly);
		private OnLoudestParticipantChanged _mOnLoudestParticipantChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMaxRemoteSourcesChanged(IntPtr c, uint maxRemoteSources);
		private OnMaxRemoteSourcesChanged _mOnMaxRemoteSourcesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceAdded(IntPtr c, IntPtr networkInterface);
		private OnNetworkInterfaceAdded _mOnNetworkInterfaceAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceRemoved(IntPtr c, IntPtr networkInterface);
		private OnNetworkInterfaceRemoved _mOnNetworkInterfaceRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceSelected(IntPtr c, IntPtr networkInterface, NetworkInterface.NetworkInterfaceTransportType transportType);
		private OnNetworkInterfaceSelected _mOnNetworkInterfaceSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceStateUpdated(IntPtr c, IntPtr networkInterface, NetworkInterface.NetworkInterfaceState state);
		private OnNetworkInterfaceStateUpdated _mOnNetworkInterfaceStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnParticipantJoined(IntPtr c, IntPtr participant);
		private OnParticipantJoined _mOnParticipantJoined;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnParticipantLeft(IntPtr c, IntPtr participant);
		private OnParticipantLeft _mOnParticipantLeft;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraAdded(IntPtr c, IntPtr remoteCamera, IntPtr participant);
		private OnRemoteCameraAdded _mOnRemoteCameraAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraFrame(IntPtr c, IntPtr remoteCamera, IntPtr participant, IntPtr videoFrame);
		private OnRemoteCameraFrame _mOnRemoteCameraFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraRemoved(IntPtr c, IntPtr remoteCamera, IntPtr participant);
		private OnRemoteCameraRemoved _mOnRemoteCameraRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraStateUpdated(IntPtr c, IntPtr remoteCamera, IntPtr participant, Device.DeviceState state);
		private OnRemoteCameraStateUpdated _mOnRemoteCameraStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneAdded(IntPtr c, IntPtr remoteMicrophone, IntPtr participant);
		private OnRemoteMicrophoneAdded _mOnRemoteMicrophoneAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneEnergy(IntPtr c, IntPtr remoteMicrophone, IntPtr participant, int audioEnergy);
		private OnRemoteMicrophoneEnergy _mOnRemoteMicrophoneEnergy;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneFrame(IntPtr c, IntPtr remoteMicrophone, IntPtr participant, IntPtr audioFrame);
		private OnRemoteMicrophoneFrame _mOnRemoteMicrophoneFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneRemoved(IntPtr c, IntPtr remoteMicrophone, IntPtr participant);
		private OnRemoteMicrophoneRemoved _mOnRemoteMicrophoneRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneStateUpdated(IntPtr c, IntPtr remoteMicrophone, IntPtr participant, Device.DeviceState state);
		private OnRemoteMicrophoneStateUpdated _mOnRemoteMicrophoneStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteRendererAdded(IntPtr c, IntPtr remoteRenderer);
		private OnRemoteRendererAdded _mOnRemoteRendererAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteRendererRemoved(IntPtr c, IntPtr remoteRenderer);
		private OnRemoteRendererRemoved _mOnRemoteRendererRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteRendererStateUpdated(IntPtr c, IntPtr remoteRenderer, Device.DeviceState state);
		private OnRemoteRendererStateUpdated _mOnRemoteRendererStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteSpeakerAdded(IntPtr c, IntPtr remoteSpeaker);
		private OnRemoteSpeakerAdded _mOnRemoteSpeakerAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteSpeakerRemoved(IntPtr c, IntPtr remoteSpeaker);
		private OnRemoteSpeakerRemoved _mOnRemoteSpeakerRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteSpeakerStateUpdated(IntPtr c, IntPtr remoteSpeaker, Device.DeviceState state);
		private OnRemoteSpeakerStateUpdated _mOnRemoteSpeakerStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareAdded(IntPtr c, IntPtr remoteWindowShare, IntPtr participant);
		private OnRemoteWindowShareAdded _mOnRemoteWindowShareAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareFrame(IntPtr c, IntPtr remoteWindowShare, IntPtr participant, IntPtr videoFrame);
		private OnRemoteWindowShareFrame _mOnRemoteWindowShareFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareRemoved(IntPtr c, IntPtr remoteWindowShare, IntPtr participant);
		private OnRemoteWindowShareRemoved _mOnRemoteWindowShareRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareStateUpdated(IntPtr c, IntPtr remoteWindowShare, IntPtr participant, Device.DeviceState state);
		private OnRemoteWindowShareStateUpdated _mOnRemoteWindowShareStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSuccess(IntPtr c);
		private OnSuccess _mOnSuccess;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnVirtualVideoSourceAdded(IntPtr c, IntPtr virtualVideoSource);
		private OnVirtualVideoSourceAdded _mOnVirtualVideoSourceAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnVirtualVideoSourceExternalMediaBufferReleased(IntPtr c, IntPtr virtualVideoSource, IntPtr buffer, ulong size);
		private OnVirtualVideoSourceExternalMediaBufferReleased _mOnVirtualVideoSourceExternalMediaBufferReleased;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnVirtualVideoSourceRemoved(IntPtr c, IntPtr virtualVideoSource);
		private OnVirtualVideoSourceRemoved _mOnVirtualVideoSourceRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnVirtualVideoSourceStateUpdated(IntPtr c, IntPtr virtualVideoSource, Device.DeviceState state);
		private OnVirtualVideoSourceStateUpdated _mOnVirtualVideoSourceStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnWebProxyCredentialsRequest(IntPtr c, IntPtr webProxyAddress);
		private OnWebProxyCredentialsRequest _mOnWebProxyCredentialsRequest;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoConnectorOnWebProxyCredentialsRequestGetwebProxyAddressCStr(IntPtr webProxyAddress);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void RecorderInCall(IntPtr c, Boolean recorderInCall);
		private RecorderInCall _mRecorderInCall;
		public enum ConnectorBaseTransportType{
			ConnectorbasetransporttypeTLS,
			ConnectorbasetransporttypeTCP,
			ConnectorbasetransporttypeUDP
		}
		public enum ConnectorDisconnectReason{
			ConnectordisconnectreasonDisconnected,
			ConnectordisconnectreasonConnectionLost,
			ConnectordisconnectreasonConnectionTimeout,
			ConnectordisconnectreasonNoResponse,
			ConnectordisconnectreasonTerminated,
			ConnectordisconnectreasonMiscLocalError,
			ConnectordisconnectreasonMiscRemoteError,
			ConnectordisconnectreasonMiscError
		}
		public enum ConnectorFailReason{
			ConnectorfailreasonConnectionFailed,
			ConnectorfailreasonConnectionLost,
			ConnectorfailreasonConnectionTimeout,
			ConnectorfailreasonNoResponse,
			ConnectorfailreasonTerminated,
			ConnectorfailreasonInvalidToken,
			ConnectorfailreasonUnableToCreateResource,
			ConnectorfailreasonNoResponseFromResource,
			ConnectorfailreasonInvalidResourceId,
			ConnectorfailreasonResourceFull,
			ConnectorfailreasonNotMember,
			ConnectorfailreasonBanned,
			ConnectorfailreasonMediaNotEnabled,
			ConnectorfailreasonMediaFailed,
			ConnectorfailreasonMiscLocalError,
			ConnectorfailreasonMiscRemoteError,
			ConnectorfailreasonMiscError,
			ConnectorfailreasonInvalidDisplayNameLength,
			ConnectorfailreasonRoomLocked,
			ConnectorfailreasonRoomDisabled,
			ConnectorfailreasonAllLinesInUse,
			ConnectorfailreasonSeatLicenseExpired,
			ConnectorfailreasonNotLicensed,
			ConnectorfailreasonRejected
		}
		public enum ConnectorMode{
			ConnectormodeDefault,
			ConnectormodeForeground,
			ConnectormodeBackground
		}
		public enum ConnectorState{
			ConnectorstateIdle,
			ConnectorstateReady,
			ConnectorstateEstablishingConnection,
			ConnectorstateFindingResource,
			ConnectorstateConnectingToResource,
			ConnectorstateEnablingMedia,
			ConnectorstateConnected
		}
		public enum ConnectorTradeOffProfile{
			ConnectortradeoffprofileHigh,
			ConnectortradeoffprofileMedium,
			ConnectortradeoffprofileLow
		}
		public enum ConnectorViewStyle{
			ConnectorviewstyleDefault,
			ConnectorviewstyleTiles
		}
		public interface IConnect{

			void OnSuccess();
			void OnFailure(ConnectorFailReason reason);
			void OnDisconnected(ConnectorDisconnectReason reason);
		}
		public interface IRegisterLocalCameraEventListener{

			void OnLocalCameraAdded(LocalCamera localCamera);
			void OnLocalCameraRemoved(LocalCamera localCamera);
			void OnLocalCameraSelected(LocalCamera localCamera);
			void OnLocalCameraStateUpdated(LocalCamera localCamera, Device.DeviceState state);
		}
		public interface IRegisterLocalCameraFrameListener{

			void OnLocalCameraFrame(LocalCamera localCamera, VideoFrame videoFrame);
		}
		public interface IRegisterLocalMicrophoneEnergyListener{

			void OnLocalMicrophoneEnergy(LocalMicrophone localMicrophone, int audioEnergy);
		}
		public interface IRegisterLocalMicrophoneEventListener{

			void OnLocalMicrophoneAdded(LocalMicrophone localMicrophone);
			void OnLocalMicrophoneRemoved(LocalMicrophone localMicrophone);
			void OnLocalMicrophoneSelected(LocalMicrophone localMicrophone);
			void OnLocalMicrophoneStateUpdated(LocalMicrophone localMicrophone, Device.DeviceState state);
		}
		public interface IRegisterLocalMicrophoneFrameListener{

			void OnLocalMicrophoneFrame(LocalMicrophone localMicrophone, AudioFrame audioFrame);
		}
		public interface IRegisterLocalMonitorEventListener{

			void OnLocalMonitorAdded(LocalMonitor localMonitor);
			void OnLocalMonitorRemoved(LocalMonitor localMonitor);
			void OnLocalMonitorSelected(LocalMonitor localMonitor);
			void OnLocalMonitorStateUpdated(LocalMonitor localMonitor, Device.DeviceState state);
		}
		public interface IRegisterLocalMonitorFrameListener{

			void OnLocalMonitorFrame(LocalMonitor localMonitor, VideoFrame videoFrame);
		}
		public interface IRegisterLocalSpeakerEventListener{

			void OnLocalSpeakerAdded(LocalSpeaker localSpeaker);
			void OnLocalSpeakerRemoved(LocalSpeaker localSpeaker);
			void OnLocalSpeakerSelected(LocalSpeaker localSpeaker);
			void OnLocalSpeakerStateUpdated(LocalSpeaker localSpeaker, Device.DeviceState state);
		}
		public interface IRegisterLocalWindowShareEventListener{

			void OnLocalWindowShareAdded(LocalWindowShare localWindowShare);
			void OnLocalWindowShareRemoved(LocalWindowShare localWindowShare);
			void OnLocalWindowShareSelected(LocalWindowShare localWindowShare);
			void OnLocalWindowShareStateUpdated(LocalWindowShare localWindowShare, Device.DeviceState state);
		}
		public interface IRegisterLocalWindowShareFrameListener{

			void OnLocalWindowShareFrame(LocalWindowShare localWindowShare, VideoFrame videoFrame);
		}
		public interface IRegisterLogEventListener{

			void OnLog(LogRecord logRecord);
		}
		public interface IRegisterMessageEventListener{

			void OnChatMessageReceived(Participant participant, ChatMessage chatMessage);
		}
		public interface IRegisterNetworkInterfaceEventListener{

			void OnNetworkInterfaceAdded(NetworkInterface networkInterface);
			void OnNetworkInterfaceRemoved(NetworkInterface networkInterface);
			void OnNetworkInterfaceSelected(NetworkInterface networkInterface, NetworkInterface.NetworkInterfaceTransportType transportType);
			void OnNetworkInterfaceStateUpdated(NetworkInterface networkInterface, NetworkInterface.NetworkInterfaceState state);
		}
		public interface IRegisterParticipantEventListener{

			void OnParticipantJoined(Participant participant);
			void OnParticipantLeft(Participant participant);
			void OnDynamicParticipantChanged(List<Participant> participants);
			void OnLoudestParticipantChanged(Participant participant, Boolean audioOnly);
		}
		public interface IRegisterRecorderInCallEventListener{

			void RecorderInCall(Boolean recorderInCall);
		}
		public interface IRegisterRemoteCameraEventListener{

			void OnRemoteCameraAdded(RemoteCamera remoteCamera, Participant participant);
			void OnRemoteCameraRemoved(RemoteCamera remoteCamera, Participant participant);
			void OnRemoteCameraStateUpdated(RemoteCamera remoteCamera, Participant participant, Device.DeviceState state);
		}
		public interface IRegisterRemoteCameraFrameListener{

			void OnRemoteCameraFrame(RemoteCamera remoteCamera, Participant participant, VideoFrame videoFrame);
		}
		public interface IRegisterRemoteMicrophoneEnergyListener{

			void OnRemoteMicrophoneEnergy(RemoteMicrophone remoteMicrophone, Participant participant, int audioEnergy);
		}
		public interface IRegisterRemoteMicrophoneEventListener{

			void OnRemoteMicrophoneAdded(RemoteMicrophone remoteMicrophone, Participant participant);
			void OnRemoteMicrophoneRemoved(RemoteMicrophone remoteMicrophone, Participant participant);
			void OnRemoteMicrophoneStateUpdated(RemoteMicrophone remoteMicrophone, Participant participant, Device.DeviceState state);
		}
		public interface IRegisterRemoteMicrophoneFrameListener{

			void OnRemoteMicrophoneFrame(RemoteMicrophone remoteMicrophone, Participant participant, AudioFrame audioFrame);
		}
		public interface IRegisterRemoteRendererEventListener{

			void OnRemoteRendererAdded(RemoteRenderer remoteRenderer);
			void OnRemoteRendererRemoved(RemoteRenderer remoteRenderer);
			void OnRemoteRendererStateUpdated(RemoteRenderer remoteRenderer, Device.DeviceState state);
		}
		public interface IRegisterRemoteSpeakerEventListener{

			void OnRemoteSpeakerAdded(RemoteSpeaker remoteSpeaker);
			void OnRemoteSpeakerRemoved(RemoteSpeaker remoteSpeaker);
			void OnRemoteSpeakerStateUpdated(RemoteSpeaker remoteSpeaker, Device.DeviceState state);
		}
		public interface IRegisterRemoteWindowShareEventListener{

			void OnRemoteWindowShareAdded(RemoteWindowShare remoteWindowShare, Participant participant);
			void OnRemoteWindowShareRemoved(RemoteWindowShare remoteWindowShare, Participant participant);
			void OnRemoteWindowShareStateUpdated(RemoteWindowShare remoteWindowShare, Participant participant, Device.DeviceState state);
		}
		public interface IRegisterRemoteWindowShareFrameListener{

			void OnRemoteWindowShareFrame(RemoteWindowShare remoteWindowShare, Participant participant, VideoFrame videoFrame);
		}
		public interface IRegisterResourceManagerEventListener{

			void OnAvailableResourcesChanged(uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive);
			void OnMaxRemoteSourcesChanged(uint maxRemoteSources);
		}
		public interface IRegisterVirtualVideoSourceEventListener{

			void OnVirtualVideoSourceAdded(VirtualVideoSource virtualVideoSource);
			void OnVirtualVideoSourceRemoved(VirtualVideoSource virtualVideoSource);
			void OnVirtualVideoSourceStateUpdated(VirtualVideoSource virtualVideoSource, Device.DeviceState state);
			void OnVirtualVideoSourceExternalMediaBufferReleased(VirtualVideoSource virtualVideoSource, byte[] buffer, ulong size);
		}
		public interface IRegisterWebProxyEventListener{

			void OnWebProxyCredentialsRequest(String webProxyAddress);
		}
		private IConnect _mIConnect;
		private IRegisterLocalCameraEventListener _mIRegisterLocalCameraEventListener;
		private IRegisterLocalCameraFrameListener _mIRegisterLocalCameraFrameListener;
		private IRegisterLocalMicrophoneEnergyListener _mIRegisterLocalMicrophoneEnergyListener;
		private IRegisterLocalMicrophoneEventListener _mIRegisterLocalMicrophoneEventListener;
		private IRegisterLocalMicrophoneFrameListener _mIRegisterLocalMicrophoneFrameListener;
		private IRegisterLocalMonitorEventListener _mIRegisterLocalMonitorEventListener;
		private IRegisterLocalMonitorFrameListener _mIRegisterLocalMonitorFrameListener;
		private IRegisterLocalSpeakerEventListener _mIRegisterLocalSpeakerEventListener;
		private IRegisterLocalWindowShareEventListener _mIRegisterLocalWindowShareEventListener;
		private IRegisterLocalWindowShareFrameListener _mIRegisterLocalWindowShareFrameListener;
		private IRegisterLogEventListener _mIRegisterLogEventListener;
		private IRegisterMessageEventListener _mIRegisterMessageEventListener;
		private IRegisterNetworkInterfaceEventListener _mIRegisterNetworkInterfaceEventListener;
		private IRegisterParticipantEventListener _mIRegisterParticipantEventListener;
		private IRegisterRecorderInCallEventListener _mIRegisterRecorderInCallEventListener;
		private IRegisterRemoteCameraEventListener _mIRegisterRemoteCameraEventListener;
		private IRegisterRemoteCameraFrameListener _mIRegisterRemoteCameraFrameListener;
		private IRegisterRemoteMicrophoneEnergyListener _mIRegisterRemoteMicrophoneEnergyListener;
		private IRegisterRemoteMicrophoneEventListener _mIRegisterRemoteMicrophoneEventListener;
		private IRegisterRemoteMicrophoneFrameListener _mIRegisterRemoteMicrophoneFrameListener;
		private IRegisterRemoteRendererEventListener _mIRegisterRemoteRendererEventListener;
		private IRegisterRemoteSpeakerEventListener _mIRegisterRemoteSpeakerEventListener;
		private IRegisterRemoteWindowShareEventListener _mIRegisterRemoteWindowShareEventListener;
		private IRegisterRemoteWindowShareFrameListener _mIRegisterRemoteWindowShareFrameListener;
		private IRegisterResourceManagerEventListener _mIRegisterResourceManagerEventListener;
		private IRegisterVirtualVideoSourceEventListener _mIRegisterVirtualVideoSourceEventListener;
		private IRegisterWebProxyEventListener _mIRegisterWebProxyEventListener;
		public Connector(IntPtr viewId, ConnectorViewStyle viewStyle, uint remoteParticipants, String logFileFilter, String logFileName, ulong userData){

			IntPtr nLogFileFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFileFilter ?? string.Empty);
			IntPtr nLogFileName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFileName ?? string.Empty);
			objPtr = VidyoConnectorConstructNative(ref viewId, viewStyle, remoteParticipants, nLogFileFilter, nLogFileName, userData);
			Marshal.FreeHGlobal(nLogFileName);
			Marshal.FreeHGlobal(nLogFileFilter);
			VidyoConnectorSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		public Connector(IntPtr other){
			objPtr = VidyoConnectorConstructCopyNative(other);
			VidyoConnectorSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~Connector(){
			Dispose(false);
		}
		public void Dispose(){
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		public void Dispose(bool disposing){
			if(!disposed){
				if(objPtr != IntPtr.Zero){
					VidyoConnectorSetUserDataNative(objPtr, IntPtr.Zero);
					VidyoConnectorDestructNative(objPtr);
				}
				disposed = true;
			}
		}

		public Boolean AddMessageClass(String messageClass){

			IntPtr nMessageClass = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(messageClass ?? string.Empty);
			Boolean ret = VidyoConnectorAddMessageClassNative(objPtr, nMessageClass);
			Marshal.FreeHGlobal(nMessageClass);

			return ret;
		}
		public Boolean AssignViewToCompositeRenderer(IntPtr viewId, ConnectorViewStyle viewStyle, uint remoteParticipants){

			Boolean ret = VidyoConnectorAssignViewToCompositeRendererNative(objPtr, ref viewId, viewStyle, remoteParticipants);

			return ret;
		}
		public Boolean AssignViewToLocalCamera(IntPtr viewId, LocalCamera localCamera, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoConnectorAssignViewToLocalCameraNative(objPtr, ref viewId, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToLocalMonitor(IntPtr viewId, LocalMonitor localMonitor, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoConnectorAssignViewToLocalMonitorNative(objPtr, ref viewId, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToLocalWindowShare(IntPtr viewId, LocalWindowShare localWindowShare, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoConnectorAssignViewToLocalWindowShareNative(objPtr, ref viewId, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToRemoteCamera(IntPtr viewId, RemoteCamera remoteCamera, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoConnectorAssignViewToRemoteCameraNative(objPtr, ref viewId, (remoteCamera != null) ? remoteCamera.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToRemoteWindowShare(IntPtr viewId, RemoteWindowShare remoteWindowShare, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoConnectorAssignViewToRemoteWindowShareNative(objPtr, ref viewId, (remoteWindowShare != null) ? remoteWindowShare.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToVirtualVideoSource(IntPtr viewId, VirtualVideoSource virtualVideoSource, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoConnectorAssignViewToVirtualVideoSourceNative(objPtr, ref viewId, (virtualVideoSource != null) ? virtualVideoSource.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean Connect(String host, String token, String displayName, String resourceId, IConnect _iIConnect){
			_mIConnect = _iIConnect;
			_mOnSuccess = OnSuccessDelegate;
			_mOnFailure = OnFailureDelegate;
			_mOnDisconnected = OnDisconnectedDelegate;

			IntPtr nHost = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(host ?? string.Empty);
			IntPtr nToken = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(token ?? string.Empty);
			IntPtr nDisplayName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(displayName ?? string.Empty);
			IntPtr nResourceId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(resourceId ?? string.Empty);
			Boolean ret = VidyoConnectorConnectNative(objPtr, nHost, nToken, nDisplayName, nResourceId, _mOnSuccess, _mOnFailure, _mOnDisconnected);
			Marshal.FreeHGlobal(nResourceId);
			Marshal.FreeHGlobal(nDisplayName);
			Marshal.FreeHGlobal(nToken);
			Marshal.FreeHGlobal(nHost);

			return ret;
		}
		public Boolean ConnectToRoomAsGuest(String host, String displayName, String roomKey, String roomPin, IConnect _iIConnect){
			_mIConnect = _iIConnect;
			_mOnSuccess = OnSuccessDelegate;
			_mOnFailure = OnFailureDelegate;
			_mOnDisconnected = OnDisconnectedDelegate;

			IntPtr nHost = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(host ?? string.Empty);
			IntPtr nDisplayName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(displayName ?? string.Empty);
			IntPtr nRoomKey = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomKey ?? string.Empty);
			IntPtr nRoomPin = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomPin ?? string.Empty);
			Boolean ret = VidyoConnectorConnectToRoomAsGuestNative(objPtr, nHost, nDisplayName, nRoomKey, nRoomPin, _mOnSuccess, _mOnFailure, _mOnDisconnected);
			Marshal.FreeHGlobal(nRoomPin);
			Marshal.FreeHGlobal(nRoomKey);
			Marshal.FreeHGlobal(nDisplayName);
			Marshal.FreeHGlobal(nHost);

			return ret;
		}
		public Boolean ConnectToRoomWithId(String host, String userName, String password, String roomId, String roomPin, IConnect _iIConnect){
			_mIConnect = _iIConnect;
			_mOnSuccess = OnSuccessDelegate;
			_mOnFailure = OnFailureDelegate;
			_mOnDisconnected = OnDisconnectedDelegate;

			IntPtr nHost = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(host ?? string.Empty);
			IntPtr nUserName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userName ?? string.Empty);
			IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
			IntPtr nRoomId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomId ?? string.Empty);
			IntPtr nRoomPin = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomPin ?? string.Empty);
			Boolean ret = VidyoConnectorConnectToRoomWithIdNative(objPtr, nHost, nUserName, nPassword, nRoomId, nRoomPin, _mOnSuccess, _mOnFailure, _mOnDisconnected);
			Marshal.FreeHGlobal(nRoomPin);
			Marshal.FreeHGlobal(nRoomId);
			Marshal.FreeHGlobal(nPassword);
			Marshal.FreeHGlobal(nUserName);
			Marshal.FreeHGlobal(nHost);

			return ret;
		}
		public Boolean ConnectToRoomWithKey(String host, String userName, String password, String roomKey, String roomPin, IConnect _iIConnect){
			_mIConnect = _iIConnect;
			_mOnSuccess = OnSuccessDelegate;
			_mOnFailure = OnFailureDelegate;
			_mOnDisconnected = OnDisconnectedDelegate;

			IntPtr nHost = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(host ?? string.Empty);
			IntPtr nUserName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userName ?? string.Empty);
			IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
			IntPtr nRoomKey = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomKey ?? string.Empty);
			IntPtr nRoomPin = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomPin ?? string.Empty);
			Boolean ret = VidyoConnectorConnectToRoomWithKeyNative(objPtr, nHost, nUserName, nPassword, nRoomKey, nRoomPin, _mOnSuccess, _mOnFailure, _mOnDisconnected);
			Marshal.FreeHGlobal(nRoomPin);
			Marshal.FreeHGlobal(nRoomKey);
			Marshal.FreeHGlobal(nPassword);
			Marshal.FreeHGlobal(nUserName);
			Marshal.FreeHGlobal(nHost);

			return ret;
		}
		public Boolean ConnectToRoomWithTokenAndId(String host, String userName, String token, String roomId, String roomPin, IConnect _iIConnect){
			_mIConnect = _iIConnect;
			_mOnSuccess = OnSuccessDelegate;
			_mOnFailure = OnFailureDelegate;
			_mOnDisconnected = OnDisconnectedDelegate;

			IntPtr nHost = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(host ?? string.Empty);
			IntPtr nUserName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userName ?? string.Empty);
			IntPtr nToken = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(token ?? string.Empty);
			IntPtr nRoomId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomId ?? string.Empty);
			IntPtr nRoomPin = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomPin ?? string.Empty);
			Boolean ret = VidyoConnectorConnectToRoomWithTokenAndIdNative(objPtr, nHost, nUserName, nToken, nRoomId, nRoomPin, _mOnSuccess, _mOnFailure, _mOnDisconnected);
			Marshal.FreeHGlobal(nRoomPin);
			Marshal.FreeHGlobal(nRoomId);
			Marshal.FreeHGlobal(nToken);
			Marshal.FreeHGlobal(nUserName);
			Marshal.FreeHGlobal(nHost);

			return ret;
		}
		public Boolean ConnectToRoomWithTokenAndKey(String host, String userName, String token, String roomKey, String roomPin, IConnect _iIConnect){
			_mIConnect = _iIConnect;
			_mOnSuccess = OnSuccessDelegate;
			_mOnFailure = OnFailureDelegate;
			_mOnDisconnected = OnDisconnectedDelegate;

			IntPtr nHost = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(host ?? string.Empty);
			IntPtr nUserName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userName ?? string.Empty);
			IntPtr nToken = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(token ?? string.Empty);
			IntPtr nRoomKey = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomKey ?? string.Empty);
			IntPtr nRoomPin = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(roomPin ?? string.Empty);
			Boolean ret = VidyoConnectorConnectToRoomWithTokenAndKeyNative(objPtr, nHost, nUserName, nToken, nRoomKey, nRoomPin, _mOnSuccess, _mOnFailure, _mOnDisconnected);
			Marshal.FreeHGlobal(nRoomPin);
			Marshal.FreeHGlobal(nRoomKey);
			Marshal.FreeHGlobal(nToken);
			Marshal.FreeHGlobal(nUserName);
			Marshal.FreeHGlobal(nHost);

			return ret;
		}
		public Boolean CreateVirtualVideoSource(VirtualVideoSource.VirtualVideoSourceType type, String id, String name){

			IntPtr nId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(id ?? string.Empty);
			IntPtr nName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(name ?? string.Empty);
			Boolean ret = VidyoConnectorCreateVirtualVideoSourceNative(objPtr, type, nId, nName);
			Marshal.FreeHGlobal(nName);
			Marshal.FreeHGlobal(nId);

			return ret;
		}
		public Boolean CycleCamera(){

			Boolean ret = VidyoConnectorCycleCameraNative(objPtr);

			return ret;
		}
		public Boolean CycleMicrophone(){

			Boolean ret = VidyoConnectorCycleMicrophoneNative(objPtr);

			return ret;
		}
		public Boolean CycleSpeaker(){

			Boolean ret = VidyoConnectorCycleSpeakerNative(objPtr);

			return ret;
		}
		public Boolean DestroyVirtualVideoSource(VirtualVideoSource virtualVideoSource){

			Boolean ret = VidyoConnectorDestroyVirtualVideoSourceNative(objPtr, (virtualVideoSource != null) ? virtualVideoSource.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public void Disable(){

			VidyoConnectorDisableNative(objPtr);
		}
		public void DisableDebug(){

			VidyoConnectorDisableDebugNative(objPtr);
		}
		public Boolean Disconnect(){

			Boolean ret = VidyoConnectorDisconnectNative(objPtr);

			return ret;
		}
		public Boolean EnableDebug(uint port, String logFilter){

			IntPtr nLogFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFilter ?? string.Empty);
			Boolean ret = VidyoConnectorEnableDebugNative(objPtr, port, nLogFilter);
			Marshal.FreeHGlobal(nLogFilter);

			return ret;
		}
		public ConnectorTradeOffProfile GetCpuTradeOffProfile(){

			ConnectorTradeOffProfile ret = VidyoConnectorGetCpuTradeOffProfileNative(objPtr);

			return ret;
		}
		public uint GetMaxReceiveBitRate(){

			uint ret = VidyoConnectorGetMaxReceiveBitRateNative(objPtr);

			return ret;
		}
		public uint GetMaxSendBitRate(){

			uint ret = VidyoConnectorGetMaxSendBitRateNative(objPtr);

			return ret;
		}
		public String GetRendererOptionsForViewId(IntPtr viewId){

			IntPtr ret = VidyoConnectorGetRendererOptionsForViewIdNative(objPtr, ref viewId);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public ConnectorState GetState(){

			ConnectorState ret = VidyoConnectorGetStateNative(objPtr);

			return ret;
		}
		public String GetStatsJson(){

			IntPtr ret = VidyoConnectorGetStatsJsonNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public String GetVersion(){

			IntPtr ret = VidyoConnectorGetVersionNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public String GetVersionWithoutBuildNumber(){

			IntPtr ret = VidyoConnectorGetVersionWithoutBuildNumberNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public Boolean HideView(IntPtr viewId){

			Boolean ret = VidyoConnectorHideViewNative(objPtr, ref viewId);

			return ret;
		}
		public Boolean RegisterLocalCameraEventListener(IRegisterLocalCameraEventListener _iIRegisterLocalCameraEventListener){
			_mIRegisterLocalCameraEventListener = _iIRegisterLocalCameraEventListener;
			_mOnLocalCameraAdded = OnLocalCameraAddedDelegate;
			_mOnLocalCameraRemoved = OnLocalCameraRemovedDelegate;
			_mOnLocalCameraSelected = OnLocalCameraSelectedDelegate;
			_mOnLocalCameraStateUpdated = OnLocalCameraStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterLocalCameraEventListenerNative(objPtr, _mOnLocalCameraAdded, _mOnLocalCameraRemoved, _mOnLocalCameraSelected, _mOnLocalCameraStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalCameraFrameListener(IRegisterLocalCameraFrameListener _iIRegisterLocalCameraFrameListener, LocalCamera localCamera, uint width, uint height, ulong frameInterval){
			_mIRegisterLocalCameraFrameListener = _iIRegisterLocalCameraFrameListener;
			_mOnLocalCameraFrame = OnLocalCameraFrameDelegate;

			Boolean ret = VidyoConnectorRegisterLocalCameraFrameListenerNative(objPtr, _mOnLocalCameraFrame, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterLocalMicrophoneEnergyListener(IRegisterLocalMicrophoneEnergyListener _iIRegisterLocalMicrophoneEnergyListener){
			_mIRegisterLocalMicrophoneEnergyListener = _iIRegisterLocalMicrophoneEnergyListener;
			_mOnLocalMicrophoneEnergy = OnLocalMicrophoneEnergyDelegate;

			Boolean ret = VidyoConnectorRegisterLocalMicrophoneEnergyListenerNative(objPtr, _mOnLocalMicrophoneEnergy);

			return ret;
		}
		public Boolean RegisterLocalMicrophoneEventListener(IRegisterLocalMicrophoneEventListener _iIRegisterLocalMicrophoneEventListener){
			_mIRegisterLocalMicrophoneEventListener = _iIRegisterLocalMicrophoneEventListener;
			_mOnLocalMicrophoneAdded = OnLocalMicrophoneAddedDelegate;
			_mOnLocalMicrophoneRemoved = OnLocalMicrophoneRemovedDelegate;
			_mOnLocalMicrophoneSelected = OnLocalMicrophoneSelectedDelegate;
			_mOnLocalMicrophoneStateUpdated = OnLocalMicrophoneStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterLocalMicrophoneEventListenerNative(objPtr, _mOnLocalMicrophoneAdded, _mOnLocalMicrophoneRemoved, _mOnLocalMicrophoneSelected, _mOnLocalMicrophoneStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalMicrophoneFrameListener(IRegisterLocalMicrophoneFrameListener _iIRegisterLocalMicrophoneFrameListener, LocalMicrophone localMicrophone){
			_mIRegisterLocalMicrophoneFrameListener = _iIRegisterLocalMicrophoneFrameListener;
			_mOnLocalMicrophoneFrame = OnLocalMicrophoneFrameDelegate;

			Boolean ret = VidyoConnectorRegisterLocalMicrophoneFrameListenerNative(objPtr, _mOnLocalMicrophoneFrame, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean RegisterLocalMonitorEventListener(IRegisterLocalMonitorEventListener _iIRegisterLocalMonitorEventListener){
			_mIRegisterLocalMonitorEventListener = _iIRegisterLocalMonitorEventListener;
			_mOnLocalMonitorAdded = OnLocalMonitorAddedDelegate;
			_mOnLocalMonitorRemoved = OnLocalMonitorRemovedDelegate;
			_mOnLocalMonitorSelected = OnLocalMonitorSelectedDelegate;
			_mOnLocalMonitorStateUpdated = OnLocalMonitorStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterLocalMonitorEventListenerNative(objPtr, _mOnLocalMonitorAdded, _mOnLocalMonitorRemoved, _mOnLocalMonitorSelected, _mOnLocalMonitorStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalMonitorFrameListener(IRegisterLocalMonitorFrameListener _iIRegisterLocalMonitorFrameListener, LocalMonitor localMonitor, uint width, uint height, ulong frameInterval){
			_mIRegisterLocalMonitorFrameListener = _iIRegisterLocalMonitorFrameListener;
			_mOnLocalMonitorFrame = OnLocalMonitorFrameDelegate;

			Boolean ret = VidyoConnectorRegisterLocalMonitorFrameListenerNative(objPtr, _mOnLocalMonitorFrame, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterLocalSpeakerEventListener(IRegisterLocalSpeakerEventListener _iIRegisterLocalSpeakerEventListener){
			_mIRegisterLocalSpeakerEventListener = _iIRegisterLocalSpeakerEventListener;
			_mOnLocalSpeakerAdded = OnLocalSpeakerAddedDelegate;
			_mOnLocalSpeakerRemoved = OnLocalSpeakerRemovedDelegate;
			_mOnLocalSpeakerSelected = OnLocalSpeakerSelectedDelegate;
			_mOnLocalSpeakerStateUpdated = OnLocalSpeakerStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterLocalSpeakerEventListenerNative(objPtr, _mOnLocalSpeakerAdded, _mOnLocalSpeakerRemoved, _mOnLocalSpeakerSelected, _mOnLocalSpeakerStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalWindowShareEventListener(IRegisterLocalWindowShareEventListener _iIRegisterLocalWindowShareEventListener){
			_mIRegisterLocalWindowShareEventListener = _iIRegisterLocalWindowShareEventListener;
			_mOnLocalWindowShareAdded = OnLocalWindowShareAddedDelegate;
			_mOnLocalWindowShareRemoved = OnLocalWindowShareRemovedDelegate;
			_mOnLocalWindowShareSelected = OnLocalWindowShareSelectedDelegate;
			_mOnLocalWindowShareStateUpdated = OnLocalWindowShareStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterLocalWindowShareEventListenerNative(objPtr, _mOnLocalWindowShareAdded, _mOnLocalWindowShareRemoved, _mOnLocalWindowShareSelected, _mOnLocalWindowShareStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalWindowShareFrameListener(IRegisterLocalWindowShareFrameListener _iIRegisterLocalWindowShareFrameListener, LocalWindowShare localWindowShare, uint width, uint height, ulong frameInterval){
			_mIRegisterLocalWindowShareFrameListener = _iIRegisterLocalWindowShareFrameListener;
			_mOnLocalWindowShareFrame = OnLocalWindowShareFrameDelegate;

			Boolean ret = VidyoConnectorRegisterLocalWindowShareFrameListenerNative(objPtr, _mOnLocalWindowShareFrame, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterLogEventListener(IRegisterLogEventListener _iIRegisterLogEventListener, String filter){
			_mIRegisterLogEventListener = _iIRegisterLogEventListener;
			_mOnLog = OnLogDelegate;

			IntPtr nFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(filter ?? string.Empty);
			Boolean ret = VidyoConnectorRegisterLogEventListenerNative(objPtr, _mOnLog, nFilter);
			Marshal.FreeHGlobal(nFilter);

			return ret;
		}
		public Boolean RegisterMessageEventListener(IRegisterMessageEventListener _iIRegisterMessageEventListener){
			_mIRegisterMessageEventListener = _iIRegisterMessageEventListener;
			_mOnChatMessageReceived = OnChatMessageReceivedDelegate;

			Boolean ret = VidyoConnectorRegisterMessageEventListenerNative(objPtr, _mOnChatMessageReceived);

			return ret;
		}
		public Boolean RegisterNetworkInterfaceEventListener(IRegisterNetworkInterfaceEventListener _iIRegisterNetworkInterfaceEventListener){
			_mIRegisterNetworkInterfaceEventListener = _iIRegisterNetworkInterfaceEventListener;
			_mOnNetworkInterfaceAdded = OnNetworkInterfaceAddedDelegate;
			_mOnNetworkInterfaceRemoved = OnNetworkInterfaceRemovedDelegate;
			_mOnNetworkInterfaceSelected = OnNetworkInterfaceSelectedDelegate;
			_mOnNetworkInterfaceStateUpdated = OnNetworkInterfaceStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterNetworkInterfaceEventListenerNative(objPtr, _mOnNetworkInterfaceAdded, _mOnNetworkInterfaceRemoved, _mOnNetworkInterfaceSelected, _mOnNetworkInterfaceStateUpdated);

			return ret;
		}
		public Boolean RegisterParticipantEventListener(IRegisterParticipantEventListener _iIRegisterParticipantEventListener){
			_mIRegisterParticipantEventListener = _iIRegisterParticipantEventListener;
			_mOnParticipantJoined = OnParticipantJoinedDelegate;
			_mOnParticipantLeft = OnParticipantLeftDelegate;
			_mOnDynamicParticipantChanged = OnDynamicParticipantChangedDelegate;
			_mOnLoudestParticipantChanged = OnLoudestParticipantChangedDelegate;

			Boolean ret = VidyoConnectorRegisterParticipantEventListenerNative(objPtr, _mOnParticipantJoined, _mOnParticipantLeft, _mOnDynamicParticipantChanged, _mOnLoudestParticipantChanged);

			return ret;
		}
		public Boolean RegisterRecorderInCallEventListener(IRegisterRecorderInCallEventListener _iIRegisterRecorderInCallEventListener){
			_mIRegisterRecorderInCallEventListener = _iIRegisterRecorderInCallEventListener;
			_mRecorderInCall = RecorderInCallDelegate;

			Boolean ret = VidyoConnectorRegisterRecorderInCallEventListenerNative(objPtr, _mRecorderInCall);

			return ret;
		}
		public Boolean RegisterRemoteCameraEventListener(IRegisterRemoteCameraEventListener _iIRegisterRemoteCameraEventListener){
			_mIRegisterRemoteCameraEventListener = _iIRegisterRemoteCameraEventListener;
			_mOnRemoteCameraAdded = OnRemoteCameraAddedDelegate;
			_mOnRemoteCameraRemoved = OnRemoteCameraRemovedDelegate;
			_mOnRemoteCameraStateUpdated = OnRemoteCameraStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteCameraEventListenerNative(objPtr, _mOnRemoteCameraAdded, _mOnRemoteCameraRemoved, _mOnRemoteCameraStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteCameraFrameListener(IRegisterRemoteCameraFrameListener _iIRegisterRemoteCameraFrameListener, RemoteCamera remoteCamera, uint width, uint height, ulong frameInterval){
			_mIRegisterRemoteCameraFrameListener = _iIRegisterRemoteCameraFrameListener;
			_mOnRemoteCameraFrame = OnRemoteCameraFrameDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteCameraFrameListenerNative(objPtr, _mOnRemoteCameraFrame, (remoteCamera != null) ? remoteCamera.GetObjectPtr():IntPtr.Zero, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterRemoteMicrophoneEnergyListener(IRegisterRemoteMicrophoneEnergyListener _iIRegisterRemoteMicrophoneEnergyListener){
			_mIRegisterRemoteMicrophoneEnergyListener = _iIRegisterRemoteMicrophoneEnergyListener;
			_mOnRemoteMicrophoneEnergy = OnRemoteMicrophoneEnergyDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteMicrophoneEnergyListenerNative(objPtr, _mOnRemoteMicrophoneEnergy);

			return ret;
		}
		public Boolean RegisterRemoteMicrophoneEventListener(IRegisterRemoteMicrophoneEventListener _iIRegisterRemoteMicrophoneEventListener){
			_mIRegisterRemoteMicrophoneEventListener = _iIRegisterRemoteMicrophoneEventListener;
			_mOnRemoteMicrophoneAdded = OnRemoteMicrophoneAddedDelegate;
			_mOnRemoteMicrophoneRemoved = OnRemoteMicrophoneRemovedDelegate;
			_mOnRemoteMicrophoneStateUpdated = OnRemoteMicrophoneStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteMicrophoneEventListenerNative(objPtr, _mOnRemoteMicrophoneAdded, _mOnRemoteMicrophoneRemoved, _mOnRemoteMicrophoneStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteMicrophoneFrameListener(IRegisterRemoteMicrophoneFrameListener _iIRegisterRemoteMicrophoneFrameListener, RemoteMicrophone remoteMicrophone){
			_mIRegisterRemoteMicrophoneFrameListener = _iIRegisterRemoteMicrophoneFrameListener;
			_mOnRemoteMicrophoneFrame = OnRemoteMicrophoneFrameDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteMicrophoneFrameListenerNative(objPtr, _mOnRemoteMicrophoneFrame, (remoteMicrophone != null) ? remoteMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean RegisterRemoteRendererEventListener(IRegisterRemoteRendererEventListener _iIRegisterRemoteRendererEventListener){
			_mIRegisterRemoteRendererEventListener = _iIRegisterRemoteRendererEventListener;
			_mOnRemoteRendererAdded = OnRemoteRendererAddedDelegate;
			_mOnRemoteRendererRemoved = OnRemoteRendererRemovedDelegate;
			_mOnRemoteRendererStateUpdated = OnRemoteRendererStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteRendererEventListenerNative(objPtr, _mOnRemoteRendererAdded, _mOnRemoteRendererRemoved, _mOnRemoteRendererStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteSpeakerEventListener(IRegisterRemoteSpeakerEventListener _iIRegisterRemoteSpeakerEventListener){
			_mIRegisterRemoteSpeakerEventListener = _iIRegisterRemoteSpeakerEventListener;
			_mOnRemoteSpeakerAdded = OnRemoteSpeakerAddedDelegate;
			_mOnRemoteSpeakerRemoved = OnRemoteSpeakerRemovedDelegate;
			_mOnRemoteSpeakerStateUpdated = OnRemoteSpeakerStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteSpeakerEventListenerNative(objPtr, _mOnRemoteSpeakerAdded, _mOnRemoteSpeakerRemoved, _mOnRemoteSpeakerStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteWindowShareEventListener(IRegisterRemoteWindowShareEventListener _iIRegisterRemoteWindowShareEventListener){
			_mIRegisterRemoteWindowShareEventListener = _iIRegisterRemoteWindowShareEventListener;
			_mOnRemoteWindowShareAdded = OnRemoteWindowShareAddedDelegate;
			_mOnRemoteWindowShareRemoved = OnRemoteWindowShareRemovedDelegate;
			_mOnRemoteWindowShareStateUpdated = OnRemoteWindowShareStateUpdatedDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteWindowShareEventListenerNative(objPtr, _mOnRemoteWindowShareAdded, _mOnRemoteWindowShareRemoved, _mOnRemoteWindowShareStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteWindowShareFrameListener(IRegisterRemoteWindowShareFrameListener _iIRegisterRemoteWindowShareFrameListener, RemoteWindowShare remoteWindowShare, uint width, uint height, ulong frameInterval){
			_mIRegisterRemoteWindowShareFrameListener = _iIRegisterRemoteWindowShareFrameListener;
			_mOnRemoteWindowShareFrame = OnRemoteWindowShareFrameDelegate;

			Boolean ret = VidyoConnectorRegisterRemoteWindowShareFrameListenerNative(objPtr, _mOnRemoteWindowShareFrame, (remoteWindowShare != null) ? remoteWindowShare.GetObjectPtr():IntPtr.Zero, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterResourceManagerEventListener(IRegisterResourceManagerEventListener _iIRegisterResourceManagerEventListener){
			_mIRegisterResourceManagerEventListener = _iIRegisterResourceManagerEventListener;
			_mOnAvailableResourcesChanged = OnAvailableResourcesChangedDelegate;
			_mOnMaxRemoteSourcesChanged = OnMaxRemoteSourcesChangedDelegate;

			Boolean ret = VidyoConnectorRegisterResourceManagerEventListenerNative(objPtr, _mOnAvailableResourcesChanged, _mOnMaxRemoteSourcesChanged);

			return ret;
		}
		public Boolean RegisterVirtualVideoSourceEventListener(IRegisterVirtualVideoSourceEventListener _iIRegisterVirtualVideoSourceEventListener){
			_mIRegisterVirtualVideoSourceEventListener = _iIRegisterVirtualVideoSourceEventListener;
			_mOnVirtualVideoSourceAdded = OnVirtualVideoSourceAddedDelegate;
			_mOnVirtualVideoSourceRemoved = OnVirtualVideoSourceRemovedDelegate;
			_mOnVirtualVideoSourceStateUpdated = OnVirtualVideoSourceStateUpdatedDelegate;
			_mOnVirtualVideoSourceExternalMediaBufferReleased = OnVirtualVideoSourceExternalMediaBufferReleasedDelegate;

			Boolean ret = VidyoConnectorRegisterVirtualVideoSourceEventListenerNative(objPtr, _mOnVirtualVideoSourceAdded, _mOnVirtualVideoSourceRemoved, _mOnVirtualVideoSourceStateUpdated, _mOnVirtualVideoSourceExternalMediaBufferReleased);

			return ret;
		}
		public Boolean RegisterWebProxyEventListener(IRegisterWebProxyEventListener _iIRegisterWebProxyEventListener){
			_mIRegisterWebProxyEventListener = _iIRegisterWebProxyEventListener;
			_mOnWebProxyCredentialsRequest = OnWebProxyCredentialsRequestDelegate;

			Boolean ret = VidyoConnectorRegisterWebProxyEventListenerNative(objPtr, _mOnWebProxyCredentialsRequest);

			return ret;
		}
		public Boolean ReportLocalParticipantOnJoined(Boolean reportLocalParticipant){

			Boolean ret = VidyoConnectorReportLocalParticipantOnJoinedNative(objPtr, reportLocalParticipant);

			return ret;
		}
		public Boolean RequestToResumeVideo(){

			Boolean ret = VidyoConnectorRequestToResumeVideoNative(objPtr);

			return ret;
		}
		public Boolean RequestToSpeak(){

			Boolean ret = VidyoConnectorRequestToSpeakNative(objPtr);

			return ret;
		}
		public Boolean SelectAudioContentShare(LocalMicrophone localMicrophone){

			Boolean ret = VidyoConnectorSelectAudioContentShareNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectDefaultCamera(){

			Boolean ret = VidyoConnectorSelectDefaultCameraNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultMicrophone(){

			Boolean ret = VidyoConnectorSelectDefaultMicrophoneNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultNetworkInterfaceForMedia(){

			Boolean ret = VidyoConnectorSelectDefaultNetworkInterfaceForMediaNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultNetworkInterfaceForSignaling(){

			Boolean ret = VidyoConnectorSelectDefaultNetworkInterfaceForSignalingNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultSpeaker(){

			Boolean ret = VidyoConnectorSelectDefaultSpeakerNative(objPtr);

			return ret;
		}
		public Boolean SelectLocalCamera(LocalCamera localCamera){

			Boolean ret = VidyoConnectorSelectLocalCameraNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalMicrophone(LocalMicrophone localMicrophone){

			Boolean ret = VidyoConnectorSelectLocalMicrophoneNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalMonitor(LocalMonitor localMonitor){

			Boolean ret = VidyoConnectorSelectLocalMonitorNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalSpeaker(LocalSpeaker localSpeaker){

			Boolean ret = VidyoConnectorSelectLocalSpeakerNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalWindowShare(LocalWindowShare localWindowShare){

			Boolean ret = VidyoConnectorSelectLocalWindowShareNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectNetworkInterfaceForMedia(NetworkInterface networkInterface){

			Boolean ret = VidyoConnectorSelectNetworkInterfaceForMediaNative(objPtr, (networkInterface != null) ? networkInterface.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectNetworkInterfaceForSignaling(NetworkInterface networkInterface){

			Boolean ret = VidyoConnectorSelectNetworkInterfaceForSignalingNative(objPtr, (networkInterface != null) ? networkInterface.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectVideoContentShare(LocalCamera localCamera){

			Boolean ret = VidyoConnectorSelectVideoContentShareNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectVirtualCamera(VirtualVideoSource virtualCamera){

			Boolean ret = VidyoConnectorSelectVirtualCameraNative(objPtr, (virtualCamera != null) ? virtualCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectVirtualSourceWindowShare(VirtualVideoSource virtualWindowShare){

			Boolean ret = VidyoConnectorSelectVirtualSourceWindowShareNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectVirtualWindowShare(VirtualWindowShare virtualWindowShare){

			Boolean ret = VidyoConnectorSelectVirtualWindowShareNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SendChatMessage(String message){

			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoConnectorSendChatMessageNative(objPtr, nMessage);
			Marshal.FreeHGlobal(nMessage);

			return ret;
		}
		public Boolean SetAdvancedOptions(String options){

			IntPtr nOptions = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(options ?? string.Empty);
			Boolean ret = VidyoConnectorSetAdvancedOptionsNative(objPtr, nOptions);
			Marshal.FreeHGlobal(nOptions);

			return ret;
		}
		public Boolean SetCameraNudgeConfiguration(String cameraNudgeConfig){

			IntPtr nCameraNudgeConfig = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(cameraNudgeConfig ?? string.Empty);
			Boolean ret = VidyoConnectorSetCameraNudgeConfigurationNative(objPtr, nCameraNudgeConfig);
			Marshal.FreeHGlobal(nCameraNudgeConfig);

			return ret;
		}
		public Boolean SetCameraPrivacy(Boolean privacy){

			Boolean ret = VidyoConnectorSetCameraPrivacyNative(objPtr, privacy);

			return ret;
		}
		public void SetCertificateAuthorityFile(String certificateAuthorityFile){

			IntPtr nCertificateAuthorityFile = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(certificateAuthorityFile ?? string.Empty);
			VidyoConnectorSetCertificateAuthorityFileNative(objPtr, nCertificateAuthorityFile);
			Marshal.FreeHGlobal(nCertificateAuthorityFile);
		}
		public void SetCertificateAuthorityList(String certificateAuthorityList){

			IntPtr nCertificateAuthorityList = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(certificateAuthorityList ?? string.Empty);
			VidyoConnectorSetCertificateAuthorityListNative(objPtr, nCertificateAuthorityList);
			Marshal.FreeHGlobal(nCertificateAuthorityList);
		}
		public Boolean SetCpuTradeOffProfile(ConnectorTradeOffProfile profile){

			Boolean ret = VidyoConnectorSetCpuTradeOffProfileNative(objPtr, profile);

			return ret;
		}
		public Boolean SetFontFileName(String fontFileName){

			IntPtr nFontFileName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(fontFileName ?? string.Empty);
			Boolean ret = VidyoConnectorSetFontFileNameNative(objPtr, nFontFileName);
			Marshal.FreeHGlobal(nFontFileName);

			return ret;
		}
		public Boolean SetLocation(double latitude, double longitude){

			Boolean ret = VidyoConnectorSetLocationNative(objPtr, latitude, longitude);

			return ret;
		}
		public void SetMaxBitRate(uint bitRate){

			VidyoConnectorSetMaxBitRateNative(objPtr, bitRate);
		}
		public void SetMaxReceiveBitRate(uint bitRate){

			VidyoConnectorSetMaxReceiveBitRateNative(objPtr, bitRate);
		}
		public void SetMaxSendBitRate(uint bitRate){

			VidyoConnectorSetMaxSendBitRateNative(objPtr, bitRate);
		}
		public Boolean SetMicrophonePrivacy(Boolean privacy){

			Boolean ret = VidyoConnectorSetMicrophonePrivacyNative(objPtr, privacy);

			return ret;
		}
		public Boolean SetMode(ConnectorMode mode){

			Boolean ret = VidyoConnectorSetModeNative(objPtr, mode);

			return ret;
		}
		public Boolean SetPool(String name){

			IntPtr nName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(name ?? string.Empty);
			Boolean ret = VidyoConnectorSetPoolNative(objPtr, nName);
			Marshal.FreeHGlobal(nName);

			return ret;
		}
		public Boolean SetRendererOptionsForViewId(IntPtr viewId, String options){

			IntPtr nOptions = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(options ?? string.Empty);
			Boolean ret = VidyoConnectorSetRendererOptionsForViewIdNative(objPtr, ref viewId, nOptions);
			Marshal.FreeHGlobal(nOptions);

			return ret;
		}
		public Boolean SetSpeakerPrivacy(Boolean privacy){

			Boolean ret = VidyoConnectorSetSpeakerPrivacyNative(objPtr, privacy);

			return ret;
		}
		public Boolean SetTCPTransport(Boolean enable){

			Boolean ret = VidyoConnectorSetTCPTransportNative(objPtr, enable);

			return ret;
		}
		public Boolean SetTURNAddressCredentials(String turnAddress, uint port, String username, String password, ConnectorBaseTransportType baseTransport){

			IntPtr nTurnAddress = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(turnAddress ?? string.Empty);
			IntPtr nUsername = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(username ?? string.Empty);
			IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
			Boolean ret = VidyoConnectorSetTURNAddressCredentialsNative(objPtr, nTurnAddress, port, nUsername, nPassword, baseTransport);
			Marshal.FreeHGlobal(nPassword);
			Marshal.FreeHGlobal(nUsername);
			Marshal.FreeHGlobal(nTurnAddress);

			return ret;
		}
		public Boolean SetTURNServerCertificateRequired(Boolean required){

			Boolean ret = VidyoConnectorSetTURNServerCertificateRequiredNative(objPtr, required);

			return ret;
		}
		public Boolean SetUDPTransport(Boolean enable){

			Boolean ret = VidyoConnectorSetUDPTransportNative(objPtr, enable);

			return ret;
		}
		public Boolean SetViewAnimationSpeed(IntPtr viewId, uint speedPercentage){

			Boolean ret = VidyoConnectorSetViewAnimationSpeedNative(objPtr, ref viewId, speedPercentage);

			return ret;
		}
		public Boolean SetViewBackgroundColor(IntPtr viewId, byte red, byte green, byte blue){

			Boolean ret = VidyoConnectorSetViewBackgroundColorNative(objPtr, ref viewId, red, green, blue);

			return ret;
		}
		public void SetWebProxyAddressCredentials(String proxyAddress, String username, String password){

			IntPtr nProxyAddress = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(proxyAddress ?? string.Empty);
			IntPtr nUsername = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(username ?? string.Empty);
			IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
			VidyoConnectorSetWebProxyAddressCredentialsNative(objPtr, nProxyAddress, nUsername, nPassword);
			Marshal.FreeHGlobal(nPassword);
			Marshal.FreeHGlobal(nUsername);
			Marshal.FreeHGlobal(nProxyAddress);
		}
		public Boolean SetWebProxyTransport(Boolean enable){

			Boolean ret = VidyoConnectorSetWebProxyTransportNative(objPtr, enable);

			return ret;
		}
		public Boolean SetWebProxyTransportAddress(String name, uint port){

			IntPtr nName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(name ?? string.Empty);
			Boolean ret = VidyoConnectorSetWebProxyTransportAddressNative(objPtr, nName, port);
			Marshal.FreeHGlobal(nName);

			return ret;
		}
		public Boolean ShowAudioMeters(IntPtr viewId, Boolean showMeters){

			Boolean ret = VidyoConnectorShowAudioMetersNative(objPtr, ref viewId, showMeters);

			return ret;
		}
		public Boolean ShowPreview(Boolean preview){

			Boolean ret = VidyoConnectorShowPreviewNative(objPtr, preview);

			return ret;
		}
		public Boolean ShowViewAt(IntPtr viewId, int x, int y, uint width, uint height){

			Boolean ret = VidyoConnectorShowViewAtNative(objPtr, ref viewId, x, y, width, height);

			return ret;
		}
		public Boolean ShowViewAtPoints(IntPtr viewId, int x, int y, uint width, uint height){

			Boolean ret = VidyoConnectorShowViewAtPointsNative(objPtr, ref viewId, x, y, width, height);

			return ret;
		}
		public Boolean ShowViewLabel(IntPtr viewId, Boolean showLabel){

			Boolean ret = VidyoConnectorShowViewLabelNative(objPtr, ref viewId, showLabel);

			return ret;
		}
		public Boolean ShowWindowSharePreview(Boolean preview){

			Boolean ret = VidyoConnectorShowWindowSharePreviewNative(objPtr, preview);

			return ret;
		}
		public Boolean UnregisterLocalCameraEventListener(){

			Boolean ret = VidyoConnectorUnregisterLocalCameraEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalCameraFrameListener(LocalCamera localCamera){

			Boolean ret = VidyoConnectorUnregisterLocalCameraFrameListenerNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLocalMicrophoneEnergyListener(){

			Boolean ret = VidyoConnectorUnregisterLocalMicrophoneEnergyListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalMicrophoneEventListener(){

			Boolean ret = VidyoConnectorUnregisterLocalMicrophoneEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalMicrophoneFrameListener(LocalMicrophone localMicrophone){

			Boolean ret = VidyoConnectorUnregisterLocalMicrophoneFrameListenerNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLocalMonitorEventListener(){

			Boolean ret = VidyoConnectorUnregisterLocalMonitorEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalMonitorFrameListener(LocalMonitor localMonitor){

			Boolean ret = VidyoConnectorUnregisterLocalMonitorFrameListenerNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLocalSpeakerEventListener(){

			Boolean ret = VidyoConnectorUnregisterLocalSpeakerEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalWindowShareEventListener(){

			Boolean ret = VidyoConnectorUnregisterLocalWindowShareEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalWindowShareFrameListener(LocalWindowShare localWindowShare){

			Boolean ret = VidyoConnectorUnregisterLocalWindowShareFrameListenerNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLogEventListener(){

			Boolean ret = VidyoConnectorUnregisterLogEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterMessageEventListener(){

			Boolean ret = VidyoConnectorUnregisterMessageEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterNetworkInterfaceEventListener(){

			Boolean ret = VidyoConnectorUnregisterNetworkInterfaceEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterParticipantEventListener(){

			Boolean ret = VidyoConnectorUnregisterParticipantEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRecorderInCallEventListener(){

			Boolean ret = VidyoConnectorUnregisterRecorderInCallEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteCameraEventListener(){

			Boolean ret = VidyoConnectorUnregisterRemoteCameraEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteCameraFrameListener(RemoteCamera remoteCamera){

			Boolean ret = VidyoConnectorUnregisterRemoteCameraFrameListenerNative(objPtr, (remoteCamera != null) ? remoteCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterRemoteMicrophoneEnergyListener(){

			Boolean ret = VidyoConnectorUnregisterRemoteMicrophoneEnergyListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteMicrophoneEventListener(){

			Boolean ret = VidyoConnectorUnregisterRemoteMicrophoneEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteMicrophoneFrameListener(RemoteMicrophone remoteMicrophone){

			Boolean ret = VidyoConnectorUnregisterRemoteMicrophoneFrameListenerNative(objPtr, (remoteMicrophone != null) ? remoteMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterRemoteRendererEventListener(){

			Boolean ret = VidyoConnectorUnregisterRemoteRendererEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteSpeakerEventListener(){

			Boolean ret = VidyoConnectorUnregisterRemoteSpeakerEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteWindowShareEventListener(){

			Boolean ret = VidyoConnectorUnregisterRemoteWindowShareEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteWindowShareFrameListener(RemoteWindowShare remoteWindowShare){

			Boolean ret = VidyoConnectorUnregisterRemoteWindowShareFrameListenerNative(objPtr, (remoteWindowShare != null) ? remoteWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterResourceManagerEventListener(){

			Boolean ret = VidyoConnectorUnregisterResourceManagerEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterVirtualVideoSourceEventListener(){

			Boolean ret = VidyoConnectorUnregisterVirtualVideoSourceEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterWebProxyEventListener(){

			Boolean ret = VidyoConnectorUnregisterWebProxyEventListenerNative(objPtr);

			return ret;
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnAvailableResourcesChanged))]
#endif
		private static void OnAvailableResourcesChangedDelegate(IntPtr c, uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			if(csC._mIRegisterResourceManagerEventListener != null)
				csC._mIRegisterResourceManagerEventListener.OnAvailableResourcesChanged(cpuEncode, cpuDecode, bandwidthSend, bandwidthReceive);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnChatMessageReceived))]
#endif
		private static void OnChatMessageReceivedDelegate(IntPtr c, IntPtr participant, IntPtr chatMessage){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			ChatMessage csChatMessage = new ChatMessage(chatMessage);
			if(csC._mIRegisterMessageEventListener != null)
				csC._mIRegisterMessageEventListener.OnChatMessageReceived(csParticipant, csChatMessage);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnDisconnected))]
#endif
		private static void OnDisconnectedDelegate(IntPtr c, ConnectorDisconnectReason reason){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			if(csC._mIConnect != null)
				csC._mIConnect.OnDisconnected(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnDynamicParticipantChanged))]
#endif
		private static void OnDynamicParticipantChangedDelegate(IntPtr c, IntPtr participants){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			List<Participant> csParticipants = new List<Participant>();
			int nParticipantsSize = 0;
			IntPtr nParticipants = VidyoConnectorOnDynamicParticipantChangedGetparticipantsArrayNative(participants, ref nParticipantsSize);
			int nParticipantsIndex = 0;
			while (nParticipantsIndex < nParticipantsSize) {
				Participant csTparticipants = null;
				if(Marshal.ReadIntPtr(nParticipants + (nParticipantsIndex * Marshal.SizeOf(nParticipants))) != IntPtr.Zero){
					if(Participant.VidyoParticipantGetUserDataNative(Marshal.ReadIntPtr(nParticipants + (nParticipantsIndex * Marshal.SizeOf(nParticipants)))) == IntPtr.Zero)
						csTparticipants = new Participant(Marshal.ReadIntPtr(nParticipants + (nParticipantsIndex * Marshal.SizeOf(nParticipants))));
					else{
						GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(Marshal.ReadIntPtr(nParticipants + (nParticipantsIndex * Marshal.SizeOf(nParticipants))));
						csTparticipants = (Participant)objHandle.Target;
					}
				}
				csParticipants.Add(csTparticipants);
				nParticipantsIndex++;
			}

			if(csC._mIRegisterParticipantEventListener != null)
				csC._mIRegisterParticipantEventListener.OnDynamicParticipantChanged(csParticipants);
			VidyoConnectorOnDynamicParticipantChangedFreeparticipantsArrayNative(nParticipants, nParticipantsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnFailure))]
#endif
		private static void OnFailureDelegate(IntPtr c, ConnectorFailReason reason){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			if(csC._mIConnect != null)
				csC._mIConnect.OnFailure(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraAdded))]
#endif
		private static void OnLocalCameraAddedDelegate(IntPtr c, IntPtr localCamera){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalCameraEventListener != null)
				csC._mIRegisterLocalCameraEventListener.OnLocalCameraAdded(csLocalCamera);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraFrame))]
#endif
		private static void OnLocalCameraFrameDelegate(IntPtr c, IntPtr localCamera, IntPtr videoFrame){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalCameraFrameListener != null)
				csC._mIRegisterLocalCameraFrameListener.OnLocalCameraFrame(csLocalCamera, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraRemoved))]
#endif
		private static void OnLocalCameraRemovedDelegate(IntPtr c, IntPtr localCamera){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalCameraEventListener != null)
				csC._mIRegisterLocalCameraEventListener.OnLocalCameraRemoved(csLocalCamera);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraSelected))]
#endif
		private static void OnLocalCameraSelectedDelegate(IntPtr c, IntPtr localCamera){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalCameraEventListener != null)
				csC._mIRegisterLocalCameraEventListener.OnLocalCameraSelected(csLocalCamera);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraStateUpdated))]
#endif
		private static void OnLocalCameraStateUpdatedDelegate(IntPtr c, IntPtr localCamera, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalCameraEventListener != null)
				csC._mIRegisterLocalCameraEventListener.OnLocalCameraStateUpdated(csLocalCamera, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneAdded))]
#endif
		private static void OnLocalMicrophoneAddedDelegate(IntPtr c, IntPtr localMicrophone){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMicrophoneEventListener != null)
				csC._mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneAdded(csLocalMicrophone);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneEnergy))]
#endif
		private static void OnLocalMicrophoneEnergyDelegate(IntPtr c, IntPtr localMicrophone, int audioEnergy){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMicrophoneEnergyListener != null)
				csC._mIRegisterLocalMicrophoneEnergyListener.OnLocalMicrophoneEnergy(csLocalMicrophone, audioEnergy);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneFrame))]
#endif
		private static void OnLocalMicrophoneFrameDelegate(IntPtr c, IntPtr localMicrophone, IntPtr audioFrame){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			AudioFrame csAudioFrame = null;
			if(audioFrame != IntPtr.Zero){
				if(AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame) == IntPtr.Zero)
					csAudioFrame = new AudioFrame(audioFrame);
				else{
					GCHandle objHandle = (GCHandle)AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame);
					csAudioFrame = (AudioFrame)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMicrophoneFrameListener != null)
				csC._mIRegisterLocalMicrophoneFrameListener.OnLocalMicrophoneFrame(csLocalMicrophone, csAudioFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneRemoved))]
#endif
		private static void OnLocalMicrophoneRemovedDelegate(IntPtr c, IntPtr localMicrophone){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMicrophoneEventListener != null)
				csC._mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneRemoved(csLocalMicrophone);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneSelected))]
#endif
		private static void OnLocalMicrophoneSelectedDelegate(IntPtr c, IntPtr localMicrophone){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMicrophoneEventListener != null)
				csC._mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneSelected(csLocalMicrophone);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneStateUpdated))]
#endif
		private static void OnLocalMicrophoneStateUpdatedDelegate(IntPtr c, IntPtr localMicrophone, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMicrophoneEventListener != null)
				csC._mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneStateUpdated(csLocalMicrophone, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorAdded))]
#endif
		private static void OnLocalMonitorAddedDelegate(IntPtr c, IntPtr localMonitor){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMonitorEventListener != null)
				csC._mIRegisterLocalMonitorEventListener.OnLocalMonitorAdded(csLocalMonitor);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorFrame))]
#endif
		private static void OnLocalMonitorFrameDelegate(IntPtr c, IntPtr localMonitor, IntPtr videoFrame){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMonitorFrameListener != null)
				csC._mIRegisterLocalMonitorFrameListener.OnLocalMonitorFrame(csLocalMonitor, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorRemoved))]
#endif
		private static void OnLocalMonitorRemovedDelegate(IntPtr c, IntPtr localMonitor){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMonitorEventListener != null)
				csC._mIRegisterLocalMonitorEventListener.OnLocalMonitorRemoved(csLocalMonitor);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorSelected))]
#endif
		private static void OnLocalMonitorSelectedDelegate(IntPtr c, IntPtr localMonitor){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMonitorEventListener != null)
				csC._mIRegisterLocalMonitorEventListener.OnLocalMonitorSelected(csLocalMonitor);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorStateUpdated))]
#endif
		private static void OnLocalMonitorStateUpdatedDelegate(IntPtr c, IntPtr localMonitor, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalMonitorEventListener != null)
				csC._mIRegisterLocalMonitorEventListener.OnLocalMonitorStateUpdated(csLocalMonitor, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerAdded))]
#endif
		private static void OnLocalSpeakerAddedDelegate(IntPtr c, IntPtr localSpeaker){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalSpeakerEventListener != null)
				csC._mIRegisterLocalSpeakerEventListener.OnLocalSpeakerAdded(csLocalSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerRemoved))]
#endif
		private static void OnLocalSpeakerRemovedDelegate(IntPtr c, IntPtr localSpeaker){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalSpeakerEventListener != null)
				csC._mIRegisterLocalSpeakerEventListener.OnLocalSpeakerRemoved(csLocalSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerSelected))]
#endif
		private static void OnLocalSpeakerSelectedDelegate(IntPtr c, IntPtr localSpeaker){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalSpeakerEventListener != null)
				csC._mIRegisterLocalSpeakerEventListener.OnLocalSpeakerSelected(csLocalSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerStateUpdated))]
#endif
		private static void OnLocalSpeakerStateUpdatedDelegate(IntPtr c, IntPtr localSpeaker, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalSpeakerEventListener != null)
				csC._mIRegisterLocalSpeakerEventListener.OnLocalSpeakerStateUpdated(csLocalSpeaker, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareAdded))]
#endif
		private static void OnLocalWindowShareAddedDelegate(IntPtr c, IntPtr localWindowShare){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalWindowShareEventListener != null)
				csC._mIRegisterLocalWindowShareEventListener.OnLocalWindowShareAdded(csLocalWindowShare);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareFrame))]
#endif
		private static void OnLocalWindowShareFrameDelegate(IntPtr c, IntPtr localWindowShare, IntPtr videoFrame){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalWindowShareFrameListener != null)
				csC._mIRegisterLocalWindowShareFrameListener.OnLocalWindowShareFrame(csLocalWindowShare, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareRemoved))]
#endif
		private static void OnLocalWindowShareRemovedDelegate(IntPtr c, IntPtr localWindowShare){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalWindowShareEventListener != null)
				csC._mIRegisterLocalWindowShareEventListener.OnLocalWindowShareRemoved(csLocalWindowShare);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareSelected))]
#endif
		private static void OnLocalWindowShareSelectedDelegate(IntPtr c, IntPtr localWindowShare){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalWindowShareEventListener != null)
				csC._mIRegisterLocalWindowShareEventListener.OnLocalWindowShareSelected(csLocalWindowShare);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareStateUpdated))]
#endif
		private static void OnLocalWindowShareStateUpdatedDelegate(IntPtr c, IntPtr localWindowShare, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(csC._mIRegisterLocalWindowShareEventListener != null)
				csC._mIRegisterLocalWindowShareEventListener.OnLocalWindowShareStateUpdated(csLocalWindowShare, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLog))]
#endif
		private static void OnLogDelegate(IntPtr c, IntPtr logRecord){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			LogRecord csLogRecord = new LogRecord(logRecord);
			if(csC._mIRegisterLogEventListener != null)
				csC._mIRegisterLogEventListener.OnLog(csLogRecord);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLoudestParticipantChanged))]
#endif
		private static void OnLoudestParticipantChangedDelegate(IntPtr c, IntPtr participant, Boolean audioOnly){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterParticipantEventListener != null)
				csC._mIRegisterParticipantEventListener.OnLoudestParticipantChanged(csParticipant, audioOnly);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMaxRemoteSourcesChanged))]
#endif
		private static void OnMaxRemoteSourcesChangedDelegate(IntPtr c, uint maxRemoteSources){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			if(csC._mIRegisterResourceManagerEventListener != null)
				csC._mIRegisterResourceManagerEventListener.OnMaxRemoteSourcesChanged(maxRemoteSources);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceAdded))]
#endif
		private static void OnNetworkInterfaceAddedDelegate(IntPtr c, IntPtr networkInterface){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(csC._mIRegisterNetworkInterfaceEventListener != null)
				csC._mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceAdded(csNetworkInterface);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceRemoved))]
#endif
		private static void OnNetworkInterfaceRemovedDelegate(IntPtr c, IntPtr networkInterface){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(csC._mIRegisterNetworkInterfaceEventListener != null)
				csC._mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceRemoved(csNetworkInterface);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceSelected))]
#endif
		private static void OnNetworkInterfaceSelectedDelegate(IntPtr c, IntPtr networkInterface, NetworkInterface.NetworkInterfaceTransportType transportType){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(csC._mIRegisterNetworkInterfaceEventListener != null)
				csC._mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceSelected(csNetworkInterface, transportType);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceStateUpdated))]
#endif
		private static void OnNetworkInterfaceStateUpdatedDelegate(IntPtr c, IntPtr networkInterface, NetworkInterface.NetworkInterfaceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(csC._mIRegisterNetworkInterfaceEventListener != null)
				csC._mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceStateUpdated(csNetworkInterface, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnParticipantJoined))]
#endif
		private static void OnParticipantJoinedDelegate(IntPtr c, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterParticipantEventListener != null)
				csC._mIRegisterParticipantEventListener.OnParticipantJoined(csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnParticipantLeft))]
#endif
		private static void OnParticipantLeftDelegate(IntPtr c, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterParticipantEventListener != null)
				csC._mIRegisterParticipantEventListener.OnParticipantLeft(csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraAdded))]
#endif
		private static void OnRemoteCameraAddedDelegate(IntPtr c, IntPtr remoteCamera, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteCameraEventListener != null)
				csC._mIRegisterRemoteCameraEventListener.OnRemoteCameraAdded(csRemoteCamera, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraFrame))]
#endif
		private static void OnRemoteCameraFrameDelegate(IntPtr c, IntPtr remoteCamera, IntPtr participant, IntPtr videoFrame){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteCameraFrameListener != null)
				csC._mIRegisterRemoteCameraFrameListener.OnRemoteCameraFrame(csRemoteCamera, csParticipant, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraRemoved))]
#endif
		private static void OnRemoteCameraRemovedDelegate(IntPtr c, IntPtr remoteCamera, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteCameraEventListener != null)
				csC._mIRegisterRemoteCameraEventListener.OnRemoteCameraRemoved(csRemoteCamera, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraStateUpdated))]
#endif
		private static void OnRemoteCameraStateUpdatedDelegate(IntPtr c, IntPtr remoteCamera, IntPtr participant, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteCameraEventListener != null)
				csC._mIRegisterRemoteCameraEventListener.OnRemoteCameraStateUpdated(csRemoteCamera, csParticipant, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneAdded))]
#endif
		private static void OnRemoteMicrophoneAddedDelegate(IntPtr c, IntPtr remoteMicrophone, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteMicrophoneEventListener != null)
				csC._mIRegisterRemoteMicrophoneEventListener.OnRemoteMicrophoneAdded(csRemoteMicrophone, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneEnergy))]
#endif
		private static void OnRemoteMicrophoneEnergyDelegate(IntPtr c, IntPtr remoteMicrophone, IntPtr participant, int audioEnergy){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteMicrophoneEnergyListener != null)
				csC._mIRegisterRemoteMicrophoneEnergyListener.OnRemoteMicrophoneEnergy(csRemoteMicrophone, csParticipant, audioEnergy);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneFrame))]
#endif
		private static void OnRemoteMicrophoneFrameDelegate(IntPtr c, IntPtr remoteMicrophone, IntPtr participant, IntPtr audioFrame){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			AudioFrame csAudioFrame = null;
			if(audioFrame != IntPtr.Zero){
				if(AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame) == IntPtr.Zero)
					csAudioFrame = new AudioFrame(audioFrame);
				else{
					GCHandle objHandle = (GCHandle)AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame);
					csAudioFrame = (AudioFrame)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteMicrophoneFrameListener != null)
				csC._mIRegisterRemoteMicrophoneFrameListener.OnRemoteMicrophoneFrame(csRemoteMicrophone, csParticipant, csAudioFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneRemoved))]
#endif
		private static void OnRemoteMicrophoneRemovedDelegate(IntPtr c, IntPtr remoteMicrophone, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteMicrophoneEventListener != null)
				csC._mIRegisterRemoteMicrophoneEventListener.OnRemoteMicrophoneRemoved(csRemoteMicrophone, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneStateUpdated))]
#endif
		private static void OnRemoteMicrophoneStateUpdatedDelegate(IntPtr c, IntPtr remoteMicrophone, IntPtr participant, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteMicrophoneEventListener != null)
				csC._mIRegisterRemoteMicrophoneEventListener.OnRemoteMicrophoneStateUpdated(csRemoteMicrophone, csParticipant, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteRendererAdded))]
#endif
		private static void OnRemoteRendererAddedDelegate(IntPtr c, IntPtr remoteRenderer){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteRenderer csRemoteRenderer = null;
			if(remoteRenderer != IntPtr.Zero){
				if(RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer) == IntPtr.Zero)
					csRemoteRenderer = new RemoteRenderer(remoteRenderer);
				else{
					GCHandle objHandle = (GCHandle)RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer);
					csRemoteRenderer = (RemoteRenderer)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteRendererEventListener != null)
				csC._mIRegisterRemoteRendererEventListener.OnRemoteRendererAdded(csRemoteRenderer);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteRendererRemoved))]
#endif
		private static void OnRemoteRendererRemovedDelegate(IntPtr c, IntPtr remoteRenderer){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteRenderer csRemoteRenderer = null;
			if(remoteRenderer != IntPtr.Zero){
				if(RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer) == IntPtr.Zero)
					csRemoteRenderer = new RemoteRenderer(remoteRenderer);
				else{
					GCHandle objHandle = (GCHandle)RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer);
					csRemoteRenderer = (RemoteRenderer)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteRendererEventListener != null)
				csC._mIRegisterRemoteRendererEventListener.OnRemoteRendererRemoved(csRemoteRenderer);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteRendererStateUpdated))]
#endif
		private static void OnRemoteRendererStateUpdatedDelegate(IntPtr c, IntPtr remoteRenderer, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteRenderer csRemoteRenderer = null;
			if(remoteRenderer != IntPtr.Zero){
				if(RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer) == IntPtr.Zero)
					csRemoteRenderer = new RemoteRenderer(remoteRenderer);
				else{
					GCHandle objHandle = (GCHandle)RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer);
					csRemoteRenderer = (RemoteRenderer)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteRendererEventListener != null)
				csC._mIRegisterRemoteRendererEventListener.OnRemoteRendererStateUpdated(csRemoteRenderer, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteSpeakerAdded))]
#endif
		private static void OnRemoteSpeakerAddedDelegate(IntPtr c, IntPtr remoteSpeaker){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteSpeaker csRemoteSpeaker = null;
			if(remoteSpeaker != IntPtr.Zero){
				if(RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker) == IntPtr.Zero)
					csRemoteSpeaker = new RemoteSpeaker(remoteSpeaker);
				else{
					GCHandle objHandle = (GCHandle)RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker);
					csRemoteSpeaker = (RemoteSpeaker)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteSpeakerEventListener != null)
				csC._mIRegisterRemoteSpeakerEventListener.OnRemoteSpeakerAdded(csRemoteSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteSpeakerRemoved))]
#endif
		private static void OnRemoteSpeakerRemovedDelegate(IntPtr c, IntPtr remoteSpeaker){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteSpeaker csRemoteSpeaker = null;
			if(remoteSpeaker != IntPtr.Zero){
				if(RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker) == IntPtr.Zero)
					csRemoteSpeaker = new RemoteSpeaker(remoteSpeaker);
				else{
					GCHandle objHandle = (GCHandle)RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker);
					csRemoteSpeaker = (RemoteSpeaker)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteSpeakerEventListener != null)
				csC._mIRegisterRemoteSpeakerEventListener.OnRemoteSpeakerRemoved(csRemoteSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteSpeakerStateUpdated))]
#endif
		private static void OnRemoteSpeakerStateUpdatedDelegate(IntPtr c, IntPtr remoteSpeaker, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteSpeaker csRemoteSpeaker = null;
			if(remoteSpeaker != IntPtr.Zero){
				if(RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker) == IntPtr.Zero)
					csRemoteSpeaker = new RemoteSpeaker(remoteSpeaker);
				else{
					GCHandle objHandle = (GCHandle)RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker);
					csRemoteSpeaker = (RemoteSpeaker)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteSpeakerEventListener != null)
				csC._mIRegisterRemoteSpeakerEventListener.OnRemoteSpeakerStateUpdated(csRemoteSpeaker, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareAdded))]
#endif
		private static void OnRemoteWindowShareAddedDelegate(IntPtr c, IntPtr remoteWindowShare, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteWindowShareEventListener != null)
				csC._mIRegisterRemoteWindowShareEventListener.OnRemoteWindowShareAdded(csRemoteWindowShare, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareFrame))]
#endif
		private static void OnRemoteWindowShareFrameDelegate(IntPtr c, IntPtr remoteWindowShare, IntPtr participant, IntPtr videoFrame){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteWindowShareFrameListener != null)
				csC._mIRegisterRemoteWindowShareFrameListener.OnRemoteWindowShareFrame(csRemoteWindowShare, csParticipant, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareRemoved))]
#endif
		private static void OnRemoteWindowShareRemovedDelegate(IntPtr c, IntPtr remoteWindowShare, IntPtr participant){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteWindowShareEventListener != null)
				csC._mIRegisterRemoteWindowShareEventListener.OnRemoteWindowShareRemoved(csRemoteWindowShare, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareStateUpdated))]
#endif
		private static void OnRemoteWindowShareStateUpdatedDelegate(IntPtr c, IntPtr remoteWindowShare, IntPtr participant, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(csC._mIRegisterRemoteWindowShareEventListener != null)
				csC._mIRegisterRemoteWindowShareEventListener.OnRemoteWindowShareStateUpdated(csRemoteWindowShare, csParticipant, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSuccess))]
#endif
		private static void OnSuccessDelegate(IntPtr c){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			if(csC._mIConnect != null)
				csC._mIConnect.OnSuccess();
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnVirtualVideoSourceAdded))]
#endif
		private static void OnVirtualVideoSourceAddedDelegate(IntPtr c, IntPtr virtualVideoSource){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			VirtualVideoSource csVirtualVideoSource = null;
			if(virtualVideoSource != IntPtr.Zero){
				if(VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource) == IntPtr.Zero)
					csVirtualVideoSource = new VirtualVideoSource(virtualVideoSource);
				else{
					GCHandle objHandle = (GCHandle)VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource);
					csVirtualVideoSource = (VirtualVideoSource)objHandle.Target;
				}
			}
			if(csC._mIRegisterVirtualVideoSourceEventListener != null)
				csC._mIRegisterVirtualVideoSourceEventListener.OnVirtualVideoSourceAdded(csVirtualVideoSource);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnVirtualVideoSourceExternalMediaBufferReleased))]
#endif
		private static void OnVirtualVideoSourceExternalMediaBufferReleasedDelegate(IntPtr c, IntPtr virtualVideoSource, IntPtr buffer, ulong size){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			VirtualVideoSource csVirtualVideoSource = null;
			if(virtualVideoSource != IntPtr.Zero){
				if(VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource) == IntPtr.Zero)
					csVirtualVideoSource = new VirtualVideoSource(virtualVideoSource);
				else{
					GCHandle objHandle = (GCHandle)VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource);
					csVirtualVideoSource = (VirtualVideoSource)objHandle.Target;
				}
			}
			byte[] pointer = ByteArrayHelperSingleton.RawPointerToByteArray(buffer);
			if(csC._mIRegisterVirtualVideoSourceEventListener != null)
				csC._mIRegisterVirtualVideoSourceEventListener.OnVirtualVideoSourceExternalMediaBufferReleased(csVirtualVideoSource, pointer, size);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnVirtualVideoSourceRemoved))]
#endif
		private static void OnVirtualVideoSourceRemovedDelegate(IntPtr c, IntPtr virtualVideoSource){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			VirtualVideoSource csVirtualVideoSource = null;
			if(virtualVideoSource != IntPtr.Zero){
				if(VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource) == IntPtr.Zero)
					csVirtualVideoSource = new VirtualVideoSource(virtualVideoSource);
				else{
					GCHandle objHandle = (GCHandle)VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource);
					csVirtualVideoSource = (VirtualVideoSource)objHandle.Target;
				}
			}
			if(csC._mIRegisterVirtualVideoSourceEventListener != null)
				csC._mIRegisterVirtualVideoSourceEventListener.OnVirtualVideoSourceRemoved(csVirtualVideoSource);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnVirtualVideoSourceStateUpdated))]
#endif
		private static void OnVirtualVideoSourceStateUpdatedDelegate(IntPtr c, IntPtr virtualVideoSource, Device.DeviceState state){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			VirtualVideoSource csVirtualVideoSource = null;
			if(virtualVideoSource != IntPtr.Zero){
				if(VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource) == IntPtr.Zero)
					csVirtualVideoSource = new VirtualVideoSource(virtualVideoSource);
				else{
					GCHandle objHandle = (GCHandle)VirtualVideoSource.VidyoVirtualVideoSourceGetUserDataNative(virtualVideoSource);
					csVirtualVideoSource = (VirtualVideoSource)objHandle.Target;
				}
			}
			if(csC._mIRegisterVirtualVideoSourceEventListener != null)
				csC._mIRegisterVirtualVideoSourceEventListener.OnVirtualVideoSourceStateUpdated(csVirtualVideoSource, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnWebProxyCredentialsRequest))]
#endif
		private static void OnWebProxyCredentialsRequestDelegate(IntPtr c, IntPtr webProxyAddress){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			IntPtr n_webProxyAddress = VidyoConnectorOnWebProxyCredentialsRequestGetwebProxyAddressCStr(webProxyAddress);

			if(csC._mIRegisterWebProxyEventListener != null)
				csC._mIRegisterWebProxyEventListener.OnWebProxyCredentialsRequest((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_webProxyAddress));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(RecorderInCall))]
#endif
		private static void RecorderInCallDelegate(IntPtr c, Boolean recorderInCall){
			Connector csC = null;
			if(c != IntPtr.Zero){
				if(Connector.VidyoConnectorGetUserDataNative(c) == IntPtr.Zero)
					csC = new Connector(c);
				else{
					GCHandle objHandle = (GCHandle)Connector.VidyoConnectorGetUserDataNative(c);
					csC = (Connector)objHandle.Target;
				}
			}
			if(csC._mIRegisterRecorderInCallEventListener != null)
				csC._mIRegisterRecorderInCallEventListener.RecorderInCall(recorderInCall);
		}
	};
}
