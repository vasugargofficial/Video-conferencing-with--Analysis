// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class CalendarManager: IDisposable {
		private bool disposed = false; 
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoCalendarManager reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarManagerConstructNative(IntPtr feedback);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoCalendarManagerCreateCalendarInstanceNative(IntPtr calMgr, IntPtr feedback, IntPtr pluginServiceId, IntPtr calendarName, IntPtr createToken);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoCalendarManagerDestroyCalendarInstanceNative(IntPtr calMgr, IntPtr cal);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoCalendarManagerDestructNative(IntPtr calendarMgr);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoCalendarManagerGetCalendarRegisteredServicesNative(IntPtr cm, IntPtr svcNames);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarManagerGetCalendarRegisteredServicesGetsvcNamesArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarManagerGetCalendarRegisteredServicesFreesvcNamesArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarManagerVectorLmiStringAllocateNative();

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoCalendarManagerVectorLmiStringDeallocateNative(IntPtr param);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		private static extern Boolean VidyoCalendarManagerRegisterCalendarServiceNative(IntPtr cm, IntPtr pluginServiceName, IntPtr dllName);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoCalendarManagerGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoCalendarManagerSetUserDataNative(IntPtr obj, IntPtr userData);

		public CalendarManager(CalendarManagerFeedback feedback){

			objPtr = VidyoCalendarManagerConstructNative((feedback != null) ? feedback.GetObjectPtr():IntPtr.Zero);
			VidyoCalendarManagerSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~CalendarManager(){
			Dispose(false);
		}
		public void Dispose(){
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		public void Dispose(bool disposing){
			if(!disposed){
				if(objPtr != IntPtr.Zero){
					VidyoCalendarManagerSetUserDataNative(objPtr, IntPtr.Zero);
					VidyoCalendarManagerDestructNative(objPtr);
				}
				disposed = true;
			}
		}

		public Boolean CreateCalendarInstance(CalendarFeedback feedback, String pluginServiceId, String calendarName, String createToken){

			IntPtr nPluginServiceId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(pluginServiceId ?? string.Empty);
			IntPtr nCalendarName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(calendarName ?? string.Empty);
			IntPtr nCreateToken = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(createToken ?? string.Empty);
			Boolean ret = VidyoCalendarManagerCreateCalendarInstanceNative(objPtr, (feedback != null) ? feedback.GetObjectPtr():IntPtr.Zero, nPluginServiceId, nCalendarName, nCreateToken);
			Marshal.FreeHGlobal(nCreateToken);
			Marshal.FreeHGlobal(nCalendarName);
			Marshal.FreeHGlobal(nPluginServiceId);

			return ret;
		}
		public Boolean DestroyCalendarInstance(Calendar cal){

			Boolean ret = VidyoCalendarManagerDestroyCalendarInstanceNative(objPtr, (cal != null) ? cal.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean GetCalendarRegisteredServices(ref List<String> svcNames){

			IntPtr nListSvcNames = VidyoCalendarManagerVectorLmiStringAllocateNative();

			Boolean ret = VidyoCalendarManagerGetCalendarRegisteredServicesNative(objPtr, nListSvcNames);

			List<String> csSvcNames = new List<String>();
			int nSvcNamesSize = 0;
			IntPtr nSvcNames = VidyoCalendarManagerGetCalendarRegisteredServicesGetsvcNamesArrayNative(nListSvcNames, ref nSvcNamesSize);
			int nSvcNamesIndex = 0;
			while (nSvcNamesIndex < nSvcNamesSize) {
				csSvcNames.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nSvcNames + (nSvcNamesIndex * Marshal.SizeOf(nSvcNames)))));
				nSvcNamesIndex++;
			}

			svcNames = csSvcNames;
			VidyoCalendarManagerGetCalendarRegisteredServicesFreesvcNamesArrayNative(nSvcNames, nSvcNamesSize);
			VidyoCalendarManagerVectorLmiStringDeallocateNative(nListSvcNames);

			return ret;
		}
		public Boolean RegisterCalendarService(String pluginServiceName, String dllName){

			IntPtr nPluginServiceName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(pluginServiceName ?? string.Empty);
			IntPtr nDllName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(dllName ?? string.Empty);
			Boolean ret = VidyoCalendarManagerRegisterCalendarServiceNative(objPtr, nPluginServiceName, nDllName);
			Marshal.FreeHGlobal(nDllName);
			Marshal.FreeHGlobal(nPluginServiceName);

			return ret;
		}
	};
}
